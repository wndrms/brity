[{"C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\index.js":"1","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\App.js":"2","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\fbase.js":"3","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Router.js":"4","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\SignUp.js":"5","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Findpw.js":"6","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Addcard.js":"7","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Findemail.js":"8","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Addnotice.js":"9","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\AuthForm.js":"10","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\routes\\Profile.js":"11","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\routes\\Home.js":"12","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\CardDragList.js":"13","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Customerhelp.js":"14","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\routes\\AccountDelete.js":"15","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\routes\\UserHome.js":"16","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Notice.js":"17","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Editcard.js":"18","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Editnotice.js":"19"},{"size":241,"mtime":1609825542236,"results":"20","hashOfConfig":"21"},{"size":1073,"mtime":1610637154978,"results":"22","hashOfConfig":"21"},{"size":742,"mtime":1609750977857,"results":"23","hashOfConfig":"21"},{"size":2938,"mtime":1611249920569,"results":"24","hashOfConfig":"21"},{"size":27799,"mtime":1611247798494,"results":"25","hashOfConfig":"21"},{"size":8296,"mtime":1610543439665,"results":"26","hashOfConfig":"21"},{"size":25368,"mtime":1611247665247,"results":"27","hashOfConfig":"21"},{"size":1061,"mtime":1609831006797,"results":"28","hashOfConfig":"21"},{"size":28795,"mtime":1611250502236,"results":"29","hashOfConfig":"21"},{"size":7462,"mtime":1611223491272,"results":"30","hashOfConfig":"21"},{"size":41469,"mtime":1610359054623,"results":"31","hashOfConfig":"21"},{"size":14222,"mtime":1611227194371,"results":"32","hashOfConfig":"21"},{"size":4532,"mtime":1611249970594,"results":"33","hashOfConfig":"21"},{"size":1025,"mtime":1609828780883,"results":"34","hashOfConfig":"21"},{"size":7957,"mtime":1611237811482,"results":"35","hashOfConfig":"21"},{"size":8520,"mtime":1610965092207,"results":"36","hashOfConfig":"21"},{"size":3267,"mtime":1611189482637,"results":"37","hashOfConfig":"21"},{"size":25811,"mtime":1611249748121,"results":"38","hashOfConfig":"21"},{"size":28828,"mtime":1611250728133,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1ll13vf",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"42"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\index.js",[],["89","90"],"C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\App.js",[],"C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\fbase.js",[],"C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Router.js",[],"C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\SignUp.js",[],"C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Findpw.js",["91"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Findpw = () => {\r\n    const [Proceeding, setProceeding] = useState(0);\r\n    const [email, setemail] = useState(\"\");\r\n    const [newpw, setnewpw] = useState();\r\n    const [newpw2, setnewpw2] = useState();\r\n    const [error, seterror] = useState(\"\");\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if(name === \"email\"){\r\n            setemail(value);\r\n        } else if(name === \"new-pw\"){\r\n            setnewpw(value);\r\n        } else if(name === \"new-pw-re\"){\r\n            setnewpw2(value);\r\n        }\r\n    };\r\n    const onDecrease = () => setProceeding(Proceeding - 1);\r\n    const onIncrease = () => setProceeding(Proceeding + 1);\r\n\r\n    return(\r\n        <>\r\n            <div id=\"wrap\" className={\"reset-pw0\" + (Proceeding + 1) + \" reset-pw join\"}>\r\n                <header id=\"header\">\r\n                    { Proceeding > 0 ? (\r\n                        <button onClick={onDecrease}><img src={process.env.PUBLIC_URL + '02-icon-01-outline-chevron-left.svg'} alt=\"Ïù¥Ï†Ñ\"></img></button>\r\n                    ) : (\r\n                        <>\r\n                            <Link to=\"/\">\r\n                                <button><img src={process.env.PUBLIC_URL + '02-icon-01-outline-chevron-left.svg'} alt=\"Ïù¥Ï†Ñ\"></img></button>            \r\n                            </Link>\r\n                        </>\r\n                    )}\r\n                </header>\r\n                <div id=\"content\" className=\"content\">\r\n                {\r\n                    (() => {\r\n                        if (Proceeding === 0) {\r\n                            return(\r\n                                <>\r\n                                    <div className=\"logo-wrap\">\r\n                                        <h2>ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ïüîè</h2>\r\n                                    </div>\r\n                                    <p>ÏûäÏñ¥Î≤ÑÎ¶∞ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏÉàÎ°≠Í≤å Î≥ÄÍ≤ΩÌï† Ïàò ÏûàÏñ¥Ïöî üßê</p>\r\n                                    <div className=\"form-box\">\r\n                                        <form>\r\n                                            <label for=\"user-id\">Ïù¥Î©îÏùº or ÏïÑÏù¥Îîî<span className=\"required\">*</span></label>\r\n                                            <input \r\n                                                type=\"text\" \r\n                                                name=\"email\"\r\n                                                id=\"user-id\" \r\n                                                className=\"input-basic\" \r\n                                                placeholder=\"Ïù¥Î©îÏùºÏù¥ÎÇò ÏïÑÏù¥ÎîîÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî\"\r\n                                                onChange={onChange}/>\r\n                                            <button></button>\r\n                                        </form>\r\n\r\n                                        <form className=\"btn-wrap\">\r\n                                            {email ? (\r\n                                                <button className=\"btn-basic next enable\" onClick={onIncrease}>Îã§Ïùå</button>\r\n                                            ) : (\r\n                                                <button className=\"btn-basic next\">Îã§Ïùå</button>\r\n                                            )}\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                            );\r\n                        }\r\n                        else if (Proceeding === 1) {\r\n                            return(\r\n                                <>\r\n                                    <div className=\"logo-wrap\">\r\n                                        <h2>ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤ΩÌïòÍ∏∞</h2>\r\n                                    </div>\r\n                                    <p><span className=\"user-id\">{email}</span> ÎãòÏùò ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Î≥ÄÍ≤ΩÌïòÍ≤†ÏäµÎãàÎã§<br/>\r\n                                        ÏÉàÎ°úÏö¥ Î≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</p>\r\n                                    <div className=\"form-box\">\r\n                                        <div>\r\n                                            <form>\r\n                                                <label for=\"new-pw\">ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏<span className=\"required\">*</span></label>\r\n                                                <input \r\n                                                    type=\"password\" \r\n                                                    className=\"input-basic\" \r\n                                                    id=\"new-pw\"\r\n                                                    name=\"new-pw\"\r\n                                                    onChange={onChange}\r\n                                                    placeholder=\"ÏÉàÎ°≠Í≤å ÏÑ§Ï†ïÌï† ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî\"/>\r\n                                                <button type=\"submit\"></button>\r\n                                                <div className=\"message\">ÏÉàÎ°≠Í≤å ÏÑ§Ï†ïÌï† ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî</div>\r\n                                            </form>\r\n                                            <form>\r\n                                                <label for=\"new-pw\">ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏<span className=\"required\">*</span></label>\r\n                                                <input \r\n                                                    type=\"password\" \r\n                                                    className=\"input-basic\" \r\n                                                    id=\"new-pw\" \r\n                                                    name=\"new-pw-re\"\r\n                                                    onChange={onChange}\r\n                                                    placeholder=\"ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî\"/>\r\n                                                <button type=\"submit\"></button>\r\n                                                <div className=\"message\">{error}</div>\r\n                                            </form>\r\n                                        </div>\r\n                                        <form className=\"btn-wrap\">\r\n                                            {newpw && newpw2 ? (\r\n                                                <button className=\"btn-basic next enable\" onClick={onIncrease}>ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤ΩÌïòÍ∏∞</button>\r\n                                            ) : (\r\n                                                <button className=\"btn-basic next\">ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤ΩÌïòÍ∏∞</button>\r\n                                            )}\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                            );\r\n                        }\r\n                        else if(Proceeding === 2){\r\n                            return(\r\n                                <>\r\n                                    <div className=\"logo-wrap\">\r\n                                        <h2>ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤ΩÏù¥ ÏôÑÎ£åÎêòÏóàÏñ¥Ïöî :)</h2>\r\n                                    </div>\r\n                                    <p>ÏÉàÎ°úÏö¥ ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Î≥ÄÍ≤Ω ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§<br/>\r\n                                        Î∞îÎÄê ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥ Ï£ºÏÑ∏Ïöî</p>\r\n                                    <div className=\"text-box\">\r\n                                        <p>e-mail</p>\r\n                                        <p className=\"user-id\">{email}</p>\r\n                                    </div>\r\n                                    <div className=\"form-box\">\r\n                                        <form className=\"btn-wrap\">\r\n                                            <Link to=\"/\">\r\n                                                <button className=\"btn-purple enable\">Î°úÍ∑∏Ïù∏ ÌïòÍ∏∞</button>\r\n                                            </Link>\r\n                                        </form>\r\n                                    </div>\r\n                                </>\r\n                            );\r\n                        }\r\n                    })()\r\n                } \r\n                </div>\r\n                <footer id=\"footer\"></footer>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Findpw;","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Addcard.js",["92"],"import { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Popup from \"reactjs-popup\";\r\nimport {v4 as uuidv4} from\"uuid\";\r\n\r\nconst Addcard = ({userObj}) => {\r\n    const history = useHistory();\r\n    const [title, settitle] = useState(\"\");\r\n    const [sub, setsub] = useState(\"\");\r\n    const [link, setlink] = useState(\"\");\r\n    const [Processing, setProcessing] = useState(0);\r\n    const [Color, setColor] = useState(\"\");\r\n    const [select, setselect] = useState(true);\r\n    const [size, setsize] = useState(true);\r\n    const [fix, setfix] = useState(false);\r\n    const [linkopen, setlinkopen] = useState(true);\r\n    const [attachment, setAttachment] = useState(\"\");\r\n    const [focustitle, setfocustitle] = useState(false);\r\n    const [focussub, setfocussub] = useState(false);\r\n    const [focuslink, setfocuslink] = useState(false);\r\n    const [btnover, setbtnover] = useState(false);\r\n    const handleScroll = () => {\r\n        const {pageYOffset} = window;\r\n        setfix(pageYOffset > 0);\r\n    };\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', handleScroll);\r\n    }, []);\r\n    const gradientcolor = [\"linear-gradient(136deg, #d4b2da 1%, #9cd6e0)\", \r\n                            \"linear-gradient(136deg, #86c9ae 1%, #704ddf)\",\r\n                            \"linear-gradient(136deg, #4590e1 1%, #de72b2)\",\r\n                            \"linear-gradient(135deg, #fa7696, #fed946 100%)\",\r\n                            \"linear-gradient(136deg, #c71d6f 1%, #d09693 100%)\",\r\n                            \"linear-gradient(136deg, #134e5e 1%, #71b280)\",\r\n                            \"linear-gradient(135deg, #16222a, #3a6073 100%)\",\r\n                            \"linear-gradient(135deg, #3a6186, #89253e 100%)\",\r\n                            \"linear-gradient(136deg, #8e2de2 1%, #4a00e0)\",\r\n                            \"linear-gradient(136deg, #4767af 1%, #1a2b4c)\",\r\n                            \"linear-gradient(136deg, #545454 1%, #111112 96%)\"];\r\n    const flatcolor = [\"#264653\", \"#2a9d8f\", \"#e9c46a\", \"#f4a261\", \"#e76f51\", \"#ce4257\", \"#720026\", \"#4f000b\", \"#540d6e\", \" #132572\", \"#1d1e20\"];\r\n    const pastelcolor = [\"#e3b5b7\", \"#ddb5cb\", \"#c8bbdb\", \"#b5cbdc\", \"#b7d0cb\", \"#e4d8b9\", \"#e1c6b3\", \"#cebdb3\", \"#988585\", \" #644d56\", \"#353240\"];\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if(name === \"title\"){\r\n            settitle(value);\r\n        } else if(name === \"sub\"){\r\n            setsub(value);\r\n        } else if(name === \"link\"){\r\n            setlink(value);\r\n        }\r\n    }\r\n    const onFocus = (event) => {\r\n        const {target: {name}} = event;\r\n        if(name === \"title\"){\r\n            setfocustitle((prev) => !prev);\r\n        } else if(name === \"sub\"){\r\n            setfocussub((prev) => !prev);\r\n        } else if(name === \"link\"){\r\n            setfocuslink((prev) => !prev);\r\n        }\r\n    }\r\n    const onClickColor = (event, colorname) => {\r\n        setColor(colorname);\r\n    }\r\n    const onSubmit = async (event) => {\r\n        if (title === \"\" || sub === \"\" || link === \"\") {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        let cardObj = \"\"\r\n        \r\n        if(select === true){\r\n            cardObj = {\r\n                title: title,\r\n                subtitle: sub,\r\n                link: link,\r\n                cardcolor: Color,\r\n                createdAt: Date.now(),\r\n                creatorId: userObj.uid,\r\n            }\r\n        } else {\r\n            let attachmentUrl = \"\";\r\n            if(attachment !== \"\"){\r\n                const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n                const response = await attachmentRef.putString(attachment, \"data_url\");\r\n                attachmentUrl = await response.ref.getDownloadURL();\r\n            }\r\n            console.log(attachmentUrl);\r\n            cardObj = {\r\n                title: title,\r\n                subtitle: sub,\r\n                link: link,\r\n                cardImage: attachmentUrl,\r\n                createdAt: Date.now(),\r\n                creatorId: userObj.uid,\r\n            }\r\n        }\r\n        await dbService.collection(\"nweets\").add(cardObj);\r\n        settitle(\"\");\r\n        setsub(\"\");\r\n        history.push(\"/\");\r\n    };\r\n    const onFileChange = (event) => {\r\n        const {target: {files}, } = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const {currentTarget: {result},\r\n            } = finishedEvent;\r\n            setAttachment(result);\r\n        };\r\n        reader.readAsDataURL(theFile);\r\n    };\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n    const toggleProcessing0 = () => setProcessing(0);\r\n    const toggleProcessing1 = () => setProcessing(1);\r\n    const toggleProcessing2 = () => setProcessing(2);\r\n    const gethome = () => history.push(\"/\");\r\n    const toggleselect = () => setselect((prev) => !prev);\r\n    const togglesize = () => setsize((prev) => !prev);\r\n    const togglelinkopen = () => setlinkopen((prev) => !prev);\r\n    const btnstyle1 = (over) => ({\r\n        borderRight: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n        borderTop: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n    });\r\n    const btnstyle2 = (over) => ({\r\n        borderTop: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n    });\r\n    return(\r\n        <div id=\"wrap\" className={\"ad-card\" + (Processing>0 ? (Processing === 1 ? (\" ad-card-size\") : (\" ad-card-cover\")) : (\"\"))}>\r\n            <header className={\"header\" + (fix ? \" fix\" : \"\")}>\r\n                <div className=\"menu-wrap\">\r\n                    <button className=\"back\" onClick={toggleProcessing0}><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-chevron-left.svg\"} alt=\"Ïù¥Ï†ÑÏúºÎ°ú\"/></button>\r\n                    <p>{(Processing>0 ? (Processing === 1 ? (\"Ïπ¥Îìú ÌÅ¨Í∏∞ ÏÑ†ÌÉù\") : (\"Ïπ¥Îìú Ïª§Î≤Ñ ÏÑ†ÌÉù\")) : (\"üîó ÎßÅÌÅ¨ Ïπ¥Îìú ÎßåÎì§Í∏∞\"))}</p>\r\n                    <Popup\r\n                        trigger={<button className=\"close\"><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-times.svg\"} alt=\"Îã´Í∏∞\"/></button>}\r\n                        modal>\r\n                        {close => (\r\n                            <div className=\"bg-opacity alert on\">\r\n                                <div className=\"alert-wrap\">\r\n                                    <div className=\"alert-box\">\r\n                                        <div className=\"text-box\">\r\n                                            <p className=\"p-header\">üñê Ïû†ÍπêÎßåÏöî</p>\r\n                                            <p className=\"p-text\">ÏûÖÎ†•Ìïú Ï†ïÎ≥¥Í∞Ä<br/>\r\n                                                ÏïÑÏßÅ Ï†ÄÏû•ÎêòÏßÄ ÏïäÏïòÏñ¥Ïöî!</p>\r\n                                        </div>\r\n                                        <div className=\"btn-box\">\r\n                                            <button onClick={() => {\r\n                                                close();\r\n                                                gethome();\r\n                                            }} onMouseEnter={() => setbtnover(true)} onMouseOut={() => setbtnover(false)} style={btnstyle1(btnover)}>Î™®Îëê Ï∑®ÏÜåÌïòÍ∏∞</button>\r\n                                            <button onClick={close} onMouseEnter={() => setbtnover(true)} onMouseOut={() => setbtnover(false)} style={btnstyle2(btnover)}>Í≥ÑÏÜç ÏûÖÎ†•ÌïòÍ∏∞</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Popup>\r\n                </div>\r\n            </header>\r\n            <div className=\"content\">\r\n                { (() => {\r\n                    if (Processing === 0){\r\n                        return(\r\n                            <>\r\n                                <div className=\"exempli border-bottom\">\r\n                                    <h2>Ïπ¥Îìú ÏòàÏãú</h2>\r\n                                    {(Color || attachment) ? (\r\n                                        select ? (\r\n                                            <div className=\"card\" style={{\r\n                                                background: Color}}>\r\n                                                <h3>{sub? sub : \"B. ü§ôüèªü§ôüèΩü§ôüèø\"}</h3>\r\n                                                <p>{title ? title : \"A. Ïπ¥Ïπ¥Ïò§ÌÜ° Î¨∏Ïùò\"}</p>\r\n                                            </div> \r\n                                        ) : (\r\n                                            <div className=\"card\" style={{\r\n                                                background: `url(${attachment})`,\r\n                                                backgroundSize: \"cover\",\r\n                                                backgroundRepeat: \"no-repeat\",\r\n                                                backgroundPosition: \"center center\",}}>\r\n                                                <h3>{sub? sub : \"B. ü§ôüèªü§ôüèΩü§ôüèø\"}</h3>\r\n                                                <p>{title ? title : \"A. Ïπ¥Ïπ¥Ïò§ÌÜ° Î¨∏Ïùò\"}</p>\r\n                                            </div> \r\n                                        )\r\n                                    ) : (\r\n                                        <div className=\"card\">\r\n                                            <h3>{sub? sub : \"B. ü§ôüèªü§ôüèΩü§ôüèø\"}</h3>\r\n                                            <p>{title ? title : \"A. Ïπ¥Ïπ¥Ïò§ÌÜ° Î¨∏Ïùò\"}</p>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-box border-bottom\">\r\n                                    <form className={focustitle ? \"selected\" : \"\"}>\r\n                                        <label for=\"card-name\">A. Ïñ¥Îñ§ Ïù¥Î¶ÑÏùò ÎßÅÌÅ¨ Ïπ¥ÎìúÎ•º ÎßåÎì§Ïñ¥ Î≥ºÍπåÏöî?<span className=\"required\">*</span></label>\r\n                                        <input \r\n                                            type=\"text\" \r\n                                            id=\"card-name\" \r\n                                            className=\"input-basic\" \r\n                                            name=\"title\"\r\n                                            value={title}\r\n                                            onChange={onChange}\r\n                                            onFocus={onFocus}\r\n                                            onBlur={onFocus}\r\n                                            placeholder=\"Ïπ¥ÎìúÏóê Î≥¥Ïó¨Ïßà Ïù¥Î¶ÑÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî  ex. Ïπ¥Ïπ¥Ïò§ÌÜ° Î¨∏Ïùò\"/>\r\n                                        <div className=\"message\">Ïπ¥Îìú Ïù¥Î¶ÑÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî</div>\r\n                                    </form>\r\n                                    <form className={focussub ? \"selected\" : \"\"}>\r\n                                        <label for=\"sub-card-name\">B. Ïñ¥Îñ§ ÏÑúÎ∏å ÌÉÄÏù¥ÌãÄÏùÑ Ï†ÅÏñ¥ ÎÜìÏùÑÍπåÏöî?</label>\r\n                                        <input \r\n                                            type=\"text\" \r\n                                            id=\"sub-card-name\" \r\n                                            className=\"input-basic\" \r\n                                            name=\"sub\"\r\n                                            value={sub}\r\n                                            onChange={onChange}\r\n                                            onFocus={onFocus}\r\n                                            onBlur={onFocus}\r\n                                            placeholder=\"ÏÑúÎ∏å ÌÉÄÏù¥ÌãÄ ÎÇ¥Ïö©ÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî  ex. B. ü§ôüèªü§ôüèΩü§ôüèø\"/>\r\n                                        <div className=\"message\">ÏÑúÎ∏å ÌÉÄÏù¥ÌãÄ ÏûÖÎ†•, ÏµúÎåÄ 16Ïûê</div>\r\n                                    </form>\r\n                                    <form className={focuslink ? \"selected\" : \"\"}>\r\n                                        <label for=\"card-index\">C. Ïó∞Í≤∞ Ìï† ÎßÅÌÅ¨ Ï£ºÏÜåÎ•º Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî<span class=\"required\">*</span></label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"card-index\"\r\n                                            className=\"input-basic\"\r\n                                            name=\"link\"\r\n                                            value={link}\r\n                                            onChange={onChange}\r\n                                            onFocus={onFocus}\r\n                                            onBlur={onFocus}\r\n                                            placeholder=\"Ïó∞Í≤∞ Ìï† ÎßÅÌÅ¨ Ï£ºÏÜå Ï†ÑÏ≤¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\"/>\r\n                                        <div className=\"message\">Ï†ïÌôïÌïú ÎßÅÌÅ¨ Ï£ºÏÜåÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</div>\r\n                                    </form>\r\n                                </div>\r\n                                <div className=\"toggle-box\">\r\n                                    <div className={linkopen ? \"toggle-on\" : \"\"}>\r\n                                        <p>ÎßÅÌÅ¨ Í≥µÍ∞ú Ïó¨Î∂Ä<span>{linkopen ? \"ON\" : \"OFF\"}</span></p>\r\n                                        <button className=\"btn-toggle\" onClick={togglelinkopen}><span></span></button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"card-size-box hover-style\">\r\n                                    <button className=\"select\" onClick={toggleProcessing1}>\r\n                                        <p>Ïπ¥Îìú ÌÅ¨Í∏∞ ÏÑ†ÌÉù<span>LARGE</span></p>\r\n                                        <img src={process.env.PUBLIC_URL + \"02-icon-01-outline-chevron-right.svg\"} alt=\"ÏÑ†ÌÉù\"/>\r\n                                    </button>\r\n                                    <button onClick={toggleProcessing2}>\r\n                                        <p>Ïπ¥Îìú Ïª§Î≤Ñ ÏÑ†ÌÉù<span>ÎØ∏ÏÑ†ÌÉù</span></p>\r\n                                        <img src={process.env.PUBLIC_URL + \"02-icon-01-outline-chevron-right.svg\"} alt=\"ÏÑ†ÌÉù\"/>\r\n                                    </button>\r\n                                </div>\r\n                                { (title && sub) ? (\r\n                                    <button className=\"btn-purple-filled enable\" onClick={onSubmit}>ÎßÅÌÅ¨ ÎßåÎì§Í∏∞ ÏôÑÎ£å</button>\r\n                                ) : (\r\n                                    <button className=\"btn-purple-filled\">ÎßÅÌÅ¨ ÎßåÎì§Í∏∞ ÏôÑÎ£å</button>\r\n                                )}\r\n                            </>\r\n                        );\r\n                    } else if( Processing === 1){\r\n                        return(\r\n                            <>\r\n                                <h2>ÏõêÌïòÎäî Ïπ¥Îìú ÌÅ¨Í∏∞Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</h2>\r\n                                <div className=\"form-box border-bottom\">\r\n                                    <form className=\"check-circle\">\r\n                                        <input type=\"checkbox\" name=\"checkbox\" id=\"size-s\" checked={!size && \"checked\"} onClick={togglesize}/>\r\n                                        <label for=\"size-s\">S</label>\r\n                                    </form>\r\n                                    <form className=\"check-circle\">\r\n                                        <input checked type=\"checkbox\" name=\"checkbox\" id=\"size-l\" checked={size && \"checked\"} onClick={togglesize}/>\r\n                                        <label for=\"size-l\">L</label>\r\n                                    </form>\r\n                                    {!size && <p className=\"size-s-error\" style={{display:\"block\"}}>üì¢ ÏßÄÍ∏àÏùÄ ‚ÄòL‚Äô ÏÇ¨Ïù¥Ï¶à Ïπ¥ÎìúÎßå ÏßÄÏõêÌïòÍ≥† ÏûàÏñ¥Ïöî<br/>\r\n                                        Ïù¥Î•∏ ÏãúÏùº ÏïàÏóê ÏÑ†ÌÉù Ìï† Ïàò ÏûàÎèÑÎ°ù ÎÖ∏Î†•ÌïòÍ≤†ÏäµÎãàÎã§ üôá‚Äç‚ôÇÔ∏è</p>}\r\n                                </div>\r\n                                <div className=\"card-box\">\r\n                                    <p>Ïπ¥Îìú ÌÅ¨Í∏∞ ÏòàÏãú</p>\r\n                                    <div className={\"card-wrap\" + (size ? \"\" : \" flex-column\")}>\r\n                                        <div className=\"card\">\r\n                                            <button><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-arrows.svg\"} alt=\"Ïù¥Îèô ÌôîÏÇ¥Ìëú\"/></button>\r\n                                            <p>S</p>\r\n                                        </div>\r\n                                        <div className=\"card checked\">\r\n                                            <button><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-arrows.svg\"} alt=\"Ïù¥Îèô ÌôîÏÇ¥Ìëú\"/></button>\r\n                                            <p>L</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                {size ? (\r\n                                    <button className=\"btn-purple-filled enable\" onClick={toggleProcessing0}>Ïπ¥Îìú ÌÅ¨Í∏∞ Ï†ÅÏö©ÌïòÍ∏∞</button>\r\n                                ) : (\r\n                                    <button className=\"btn-purple-filled\">Ïπ¥Îìú ÌÅ¨Í∏∞ Ï†ÅÏö©ÌïòÍ∏∞</button>\r\n                                )}\r\n                            </>\r\n                        );\r\n                    } else if (Processing === 2){\r\n                        return(\r\n                            <>\r\n                                <h2>ÏõêÌïòÎäî Ïπ¥Îìú ÏÉâÏÉÅÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</h2>\r\n                                <div className=\"form-box border-bottom\">\r\n                                    <form className=\"check-circle\">\r\n                                        <input type=\"checkbox\" name=\"checkbox\" id=\"bd-check-color\" checked={select && \"checked\"} onClick={toggleselect}/>\r\n                                        <label for=\"bd-check-color\">ÏÉâÏÉÅ ÏÑ†ÌÉùÌïòÍ∏∞</label>\r\n                                    </form>\r\n                                    <form className=\"check-circle\">\r\n                                        <input type=\"checkbox\" name=\"checkbox\" id=\"bd-check-img\" checked={!select && \"checked\"}onClick={toggleselect}/>\r\n                                        <label for=\"bd-check-img\">Ïù¥ÎØ∏ÏßÄ Ïò¨Î¶¨Í∏∞</label>\r\n                                    </form>\r\n                                </div>\r\n                                { select ? (\r\n                                    <div className=\"colorBox\">\r\n                                        <h3>ÏÉâÏÉÅ Ïπ¥Îìú Ï§ë ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</h3>\r\n                                        <div className=\"color-box-wrap\">\r\n                                            <div className=\"gradients\">\r\n                                                <h4>Gradients</h4>\r\n                                                <div className=\"color-chip-wrap\">\r\n                                                    {gradientcolor.map(key => {\r\n                                                        if(key === Color){\r\n                                                            return <div className=\"check\" onClick={(e) => onClickColor(e, key)}></div>\r\n                                                        } else {\r\n                                                            return <div onClick={(e) => onClickColor(e, key)}></div>\r\n                                                        }\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"flat-color\">\r\n                                                <h4>Flat colors</h4>\r\n                                                <div className=\"color-chip-wrap\">\r\n                                                    {flatcolor.map(key => {\r\n                                                        if(key === Color){\r\n                                                            return <div className=\"check\" onClick={(e) => onClickColor(e, key)}></div>\r\n                                                        } else {\r\n                                                            return <div onClick={(e) => onClickColor(e, key)}></div>\r\n                                                        }\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"pastel-color\">\r\n                                                <h4>Pastel colors </h4>\r\n                                                <div className=\"color-chip-wrap\">\r\n                                                    {pastelcolor.map(key => {\r\n                                                        if(key === Color){\r\n                                                            return <div className=\"check\" onClick={(e) => onClickColor(e, key)}></div>\r\n                                                        } else {\r\n                                                            return <div onClick={(e) => onClickColor(e, key)}></div>\r\n                                                        }\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                ) : (\r\n                                    <div className=\"imgBox\">\r\n                                        <div className=\"form-box\">\r\n                                            <form>\r\n                                                <label for=\"card-img\" className=\"ad-img-box\">\r\n                                                    <p>ÏõêÌïòÎäî Ïù¥ÎØ∏ÏßÄÎ•º Ïò¨Î†§Ï£ºÏÑ∏Ïöî</p>\r\n                                                    {attachment ? (\r\n                                                        <>\r\n                                                            <div style={{\r\n                                                                background: `url(${attachment})`,\r\n                                                                backgroundSize: \"cover\",\r\n                                                                backgroundRepeat: \"no-repeat\",\r\n                                                                backgroundPosition: \"center center\",}}>\r\n                                                                <p>üì∑</p>\r\n                                                                <p>Ïù¥ÎØ∏ÏßÄ Ïò¨Î¶¨Í∏∞</p>\r\n                                                                <p>ÌÅ¥Î¶≠ ÌõÑ Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÍ±∞ÎÇò,<br/>\r\n                                                                    ÏßÅÏ†ë ÎÅåÏñ¥ÏôÄÏÑú ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî </p>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            <div>\r\n                                                                <p>üì∑</p>\r\n                                                                <p>Ïù¥ÎØ∏ÏßÄ Ïò¨Î¶¨Í∏∞</p>\r\n                                                                <p>ÌÅ¥Î¶≠ ÌõÑ Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÍ±∞ÎÇò,<br/>\r\n                                                                    ÏßÅÏ†ë ÎÅåÏñ¥ÏôÄÏÑú ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî </p>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    )}\r\n                                                </label>\r\n                                                <input \r\n                                                    type=\"file\" \r\n                                                    id={\"card-img\" + (attachment ? \" on\" : \"\")} \r\n                                                    className=\"input-basic\" \r\n                                                    onChange={onFileChange}\r\n                                                    checked/>\r\n                                                <div className={\"img-del-btn\" + (attachment ? (\" on\") : (\"\"))}>\r\n                                                    <button onClick={onClearAttachment}><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-trash.svg\"} alt=\"Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†úÌïòÍ∏∞\"/>ÏÇ≠Ï†ú</button>\r\n                                                </div>\r\n                                            </form>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                <button className=\"btn-purple-filled enable\" onClick={toggleProcessing0}>Ïπ¥Îìú Ïª§Î≤Ñ Ï†ÅÏö©ÌïòÍ∏∞</button>\r\n                            </>\r\n                        );\r\n                    } \r\n                })()}\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Addcard;","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Findemail.js",[],"C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Addnotice.js",["93"],"C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\AuthForm.js",["94"],"import { authService, firebaseInstance } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [Proceeding, setProceeding] = useState(false);\r\n    const [focusemail, setfocusemail] = useState(false);\r\n    const [focuspw, setfocuspw] = useState(false);\r\n    const [pwshow, setpwshow] = useState(false);\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if(name === \"email\"){\r\n            setEmail(value);\r\n        } else if(name === \"password\"){\r\n            setPassword(value);\r\n        }\r\n    };\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        try {\r\n            let data;\r\n            data = await authService.signInWithEmailAndPassword(\r\n                email, \r\n                password\r\n            );\r\n            console.log(data);\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n    const onSocialClick = async (event) => {\r\n        const {\r\n            target: {name},\r\n        } = event;\r\n        let provider;\r\n        if(name === \"google\"){\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        }\r\n        const data = await authService.signInWithPopup(provider);\r\n        console.log(data);\r\n    };\r\n    const toggleProceeding = () => setProceeding((prev) => !prev);\r\n    const onFocus = (event) => {\r\n        const {target: {name}} = event;\r\n        if(name === \"email\"){\r\n            setfocusemail((prev) => !prev);\r\n        } else if(name === \"password\"){\r\n            setfocuspw((prev) => !prev);\r\n        }\r\n    };\r\n    const togglepwshow = (event) => {\r\n        event.preventDefault();\r\n        setpwshow((prev) => !prev);\r\n    }\r\n    return(\r\n        <>\r\n            <div id=\"wrap\" className={Proceeding ? \"login-pw join\" : \"login-email join\"}>\r\n                <header id=\"header\">\r\n                    <button onClick={toggleProceeding}><img src={process.env.PUBLIC_URL + '02-icon-01-outline-chevron-left.svg'} alt=\"Ïù¥Ï†Ñ\"></img></button>\r\n                </header>\r\n                <div id=\"content\" className=\"content\">\r\n                    \r\n                    {!Proceeding ? (\r\n                        <>\r\n                            <div className=\"logo-wrap\">\r\n                                <h1>Brity</h1>\r\n                                <p>admin</p>\r\n                            </div>\r\n                            <p>ÏïàÎÖïÌïòÏÑ∏Ïöî, Î∏åÎ¶¨Ìã∞ Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄ ÏûÖÎãàÎã§üòÄ<br></br>\r\n                                Î∏åÎ¶¨Ìã∞ÏôÄ Ìï®Íªò ÏòÅÏó≠ÏùÑ ÌôïÏû•Ìï¥Î≥ºÍπåÏöî?</p>\r\n                            <div className=\"form-box\">\r\n                                <form className={(focusemail ? \"selected\" : \"\") + (email ? \" filled\" : \"\")}>\r\n                                    <label for=\"user-email\">Ïù¥Î©îÏùº</label>\r\n                                    <input \r\n                                        name=\"email\" \r\n                                        type=\"email\" \r\n                                        className=\"input-basic\"\r\n                                        id=\"user-email\" \r\n                                        placeholder=\"Ïù¥Î©îÏùºÏù¥ÎÇò ÏïÑÏù¥ÎîîÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî\"\r\n                                        value={email}\r\n                                        onFocus={onFocus}\r\n                                        onBlur={onFocus}\r\n                                        onChange={onChange}/>\r\n                                    <button onClick={() => {setEmail(\"\")}}></button>\r\n                                    <div className=\"message\">{error}</div>\r\n                                </form>\r\n                                <div className=\"btn-wrap\">\r\n                                    <Link to=\"/Findemail\">\r\n                                        Ïù¥Î©îÏùºÏùÑ ÏûäÏúºÏÖ®ÎÇòÏöî?\r\n                                    </Link>\r\n                                    {email ? (\r\n                                        <button className=\"btn-basic next enable\" onClick={toggleProceeding}>Îã§Ïùå</button>\r\n                                    ) : (\r\n                                        <button className=\"btn-basic next\">Îã§Ïùå</button>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <a onClick={onSocialClick} name=\"google\" className=\"login-google btn-purple enable\">Continue with&nbsp;<img src={process.env.PUBLIC_URL + 'google.svg'} alt=\"google\"/></a>         \r\n                        </>\r\n                        ) : (\r\n                        <>\r\n                            <div className=\"logo-wrap\">\r\n                                <h2>Brity</h2>\r\n                                <p>admin</p>\r\n                            </div>\r\n                            <p className=\"user-id\">{email}</p>\r\n                            <div className=\"form-box\">\r\n                                <form className={(focuspw ? \"selected\" : \"\") + (pwshow ? \" pw-veiw\" : \" pw-hide\")}>\r\n                                    <label for=\"login-pw\">ÎπÑÎ∞ÄÎ≤àÌò∏</label>\r\n                                    <input \r\n                                        name=\"password\" \r\n                                        type={pwshow ? \"text\" : \"password\"}\r\n                                        className=\"input-basic\" \r\n                                        id=\"login-pw\"\r\n                                        placeholder=\"ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî\"\r\n                                        value={password}\r\n                                        onFocus={onFocus}\r\n                                        onBlur={onFocus}\r\n                                        onChange={onChange}/>\r\n                                        <button onClick={togglepwshow}></button>\r\n                                        <div className=\"message\">{error}</div>\r\n                                </form>\r\n                                <div className=\"check-circle square\">\r\n                                    <input type=\"checkbox\" id=\"pw-save\"/>\r\n                                    <label for=\"pw-save\">Î°úÍ∑∏Ïù∏ Ïú†ÏßÄÌïòÍ∏∞</label>\r\n                                </div>\r\n                                <div className=\"btn-wrap\">\r\n                                    <Link to=\"/Findpw\">\r\n                                        ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûäÏúºÏÖ®ÎÇòÏöî?\r\n                                    </Link>\r\n                                    {password ? (\r\n                                        <button className=\"btn-basic next enable\" onClick={onSubmit}>Îã§Ïùå</button>\r\n                                    ) : (\r\n                                        <button className=\"btn-basic next\">Îã§Ïùå</button>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                    \r\n                    <Link to=\"/SignUp\">\r\n                        <button className=\"btn-purple fix-bottom enable\">Brity Í≥ÑÏ†ï ÎßåÎì§Í∏∞</button>\r\n                    </Link>\r\n                    \r\n                </div>\r\n            </div>\r\n            <footer id=\"footer\"></footer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AuthForm;","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\routes\\Profile.js",["95","96","97","98","99","100","101"],"import { firebaseInstance, authService, dbService } from \"fbase\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport DaumPostcode from \"react-daum-postcode\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Popup from \"reactjs-popup\";\r\n\r\nconst Profile = ({refreshUser, userObj}) => {\r\n    const history = useHistory();\r\n    const [page, setpage] = useState(0);\r\n    const [fix, setfix] = useState(false);\r\n    const [instagram, setinstagram] = useState(\"\");\r\n    const [facebook, setfacebook] = useState(\"\");\r\n    const [youtube, setyoutube] = useState(\"\");\r\n    const [tiktok, settiktok] = useState(\"\");\r\n    const [twitter, settwitter] = useState(\"\");\r\n    const [email, setemail] = useState(authService.currentUser.email);\r\n    const [name, setname] = useState(\"\");\r\n    const [year, setyear] = useState(\"\");\r\n    const [month, setmonth] = useState(\"\");\r\n    const [date, setdate] = useState(\"\");\r\n    const [gender, setgender] = useState(\"\");\r\n    const [address, setaddress] = useState(\"\");\r\n    const [subadd, setsubadd] = useState(\"\");\r\n    const [pw, setpw] = useState(\"\");\r\n    const [newpw, setnewpw] = useState(\"\");\r\n    const [newpwre, setnewpwre] = useState(\"\");\r\n    const [search, setsearch] = useState(false);\r\n    const [focusname, setfocusname] = useState(false);\r\n    const [focusemail, setfocusemail] = useState(false);\r\n    const [focuspw, setfocuspw] = useState(false);\r\n    const [focusyear, setfocusyear] = useState(false);\r\n    const [focusmonth, setfocusmonth] = useState(false);\r\n    const [focusdate, setfocusdate] = useState(false);\r\n    const [focussubadd, setfocussubadd] = useState(false);\r\n    const [focusnewpw, setfocusnewpw] = useState(false);\r\n    const [focusnewpwre, setfocusnewpwre] = useState(false);\r\n    const [pwshow, setpwshow] = useState(false);\r\n    const [newpwshow, setnewpwshow] = useState(false);\r\n    const [newpwreshow, setnewpwreshow] = useState(false);\r\n    const [error, seterror] = useState(false);\r\n    const [btnover, setbtnover] = useState(false);\r\n    const handleScroll = () => {\r\n        const {pageYOffset} = window;\r\n        setfix(pageYOffset > 0);\r\n    };\r\n\r\n    useEffect(() => {\r\n        let userdata = dbService.collection(\"users\").doc(authService.currentUser.email);\r\n        let getdoc = userdata.get()\r\n            .then(doc => {\r\n                if(!doc.exists) {\r\n                    dbService.collection(\"users\").doc(authService.currentUser.email).set({\r\n                        email: authService.currentUser.email,\r\n                    });\r\n                } else {\r\n                    console.log(\"DATA : \", doc.data());\r\n                    if(doc.data().email === undefined) setemail(authService.currentUser.email);\r\n                    else setemail(doc.data().email);\r\n                    if(doc.data().name === undefined) setname(\"\");\r\n                    else setname(doc.data().name);\r\n                    if(doc.data().gender === undefined) setgender(2);\r\n                    else setgender(doc.data().gender);\r\n                    if(doc.data().address === undefined) setaddress(\"\");\r\n                    else setaddress(doc.data().address);\r\n                    if(doc.data().subadd === undefined) setsubadd(\"\");\r\n                    else setsubadd(doc.data().subadd);\r\n                    if(doc.data().birth === undefined){\r\n                        setyear(\"\");\r\n                        setmonth(\"\");\r\n                        setdate(\"\");\r\n                    }\r\n                    else {\r\n                        setyear(Math.floor(Number(doc.data().birth) / 10000));\r\n                        setmonth(Math.floor((Number(doc.data().birth) % 10000) / 100));\r\n                        setdate(Math.floor(Number(doc.data().birth) % 100));\r\n                    }\r\n                    setinstagram(doc.data().instagram === undefined ? \"\" : doc.data().instagram);\r\n                    setfacebook(doc.data().facebook === undefined ? \"\" : doc.data().facebook);\r\n                    setyoutube(doc.data().youtube === undefined ? \"\" : doc.data().youtube);\r\n                    settiktok(doc.data().tiktok === undefined ? \"\" : doc.data().tiktok);\r\n                    settwitter(doc.data().twitter === undefined ? \"\" : doc.data().twitter);\r\n                }\r\n            }).catch(err => {\r\n                console.log(err);\r\n            });\r\n        window.addEventListener('scroll', handleScroll);\r\n    }, []);\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if(name === \"name\"){\r\n            setname(value);\r\n        } else if(name === \"user-email\"){\r\n            setemail(value);\r\n        } else if(name === \"year\"){\r\n            setyear(value);\r\n        } else if(name === \"month\"){\r\n            setmonth(value);\r\n        } else if(name === \"date\"){\r\n            setdate(value);\r\n        } else if(name === \"detail-address\"){\r\n            setsubadd(value);\r\n        } else if(name === \"pw\"){\r\n            setpw(value);\r\n        } else if(name === \"new-pw\"){\r\n            setnewpw(value);\r\n        } else if(name === \"new-pw-re\"){\r\n            setnewpwre(value);\r\n        } else if(name === \"instagram\"){\r\n            setinstagram(value);\r\n        } else if(name === \"facebook\"){\r\n            setfacebook(value);\r\n        } else if(name === \"youtube\"){\r\n            setyoutube(value);\r\n        } else if(name === \"tiktok\"){\r\n            settiktok(value);\r\n        } else if(name === \"twitter\"){\r\n            settwitter(value);\r\n        }\r\n    };\r\n    const onFocus = (event) => {\r\n        const {target: {name}} = event;\r\n        if(name === \"name\"){\r\n            setfocusname((prev) => !prev);\r\n        } else if(name === \"user-email\"){\r\n            setfocusemail((prev) => !prev);\r\n        } else if(name === \"year\"){\r\n            setfocusyear((prev) => !prev);\r\n        } else if(name === \"month\"){\r\n            setfocusmonth((prev) => !prev);\r\n        } else if(name === \"date\"){\r\n            setfocusdate((prev) => !prev);\r\n        } else if(name === \"detail-address\"){\r\n            setfocussubadd((prev) => !prev);\r\n        } else if(name === \"pw\"){\r\n            setfocuspw((prev) => !prev);\r\n        } else if(name === \"new-pw\"){\r\n            setfocusnewpw((prev) => !prev);\r\n        } else if(name === \"new-pw-re\"){\r\n            setfocusnewpwre((prev) => !prev);\r\n        }\r\n    };\r\n    const onLogOutClick = (e) => {\r\n        e.preventDefault();\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n        refreshUser();\r\n    };\r\n    const gethome = () => history.push(\"/\");\r\n    const getdelete =() => history.push(\"/delete\");\r\n    const togglepage = (num) => {\r\n        setpage(num);\r\n        seterror(false);\r\n    }\r\n    const toggleclassName = () => {\r\n        if(page === 0) return \"ad-card account-menu account\"\r\n        else if(page === 1) return \"ad-card account-sns account\"\r\n        else if(page > 1){\r\n            let pagenum = \"account-info0\" + String(page-1) + \" account account-info\";\r\n            return pagenum \r\n        }\r\n    }\r\n    const togglemenuName = () => {\r\n        if(page === 0) return \"üõ† ÎÇ¥ Í≥ÑÏ†ï Í¥ÄÎ¶¨\"\r\n        else if(page === 1) return \"SNS Í≥ÑÏ†ï Ï†ïÎ≥¥\"\r\n        else if(page >= 2) return \"Í∞úÏù∏ Ï†ïÎ≥¥\" \r\n    }\r\n    const selectgender = (event) => {\r\n        const {target: {value}} = event;\r\n        setgender(value);\r\n        console.log(gender);\r\n    }\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const data = {\r\n            email: email,\r\n            name: name,\r\n            birth: year*10000 + month*100 + date,\r\n            gender: gender,\r\n            address: address,\r\n            subadd: subadd,\r\n        }\r\n        await dbService.collection('users').doc(authService.currentUser.email).update(data);\r\n        setpage(2);\r\n    };\r\n    const onSubmit2 = async (event) => {\r\n        const data = {\r\n            instagram: instagram,\r\n            facebook: facebook,\r\n            youtube: youtube,\r\n            tiktok: tiktok,\r\n            twitter: twitter,\r\n        }\r\n        await dbService.collection('users').doc(authService.currentUser.email).update(data);\r\n        setpage(0);\r\n    };\r\n    const togglesearch = () => setsearch((prev) => !prev);\r\n    const handleComplete = (data) => {\r\n        let fullAddress = data.address;\r\n        let extraAddress = '';\r\n\r\n        if (data.addressType === 'R') {\r\n            if (data.bname !== '') {\r\n                extraAddress += data.bname;\r\n            }\r\n            if (data.buildingName !== ''){\r\n                extraAddress += (extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName);\r\n            }\r\n            fullAddress += (extraAddress !== '' ? ` (${extraAddress})` : '');\r\n        }\r\n        setaddress(fullAddress);\r\n        togglesearch();\r\n    };\r\n    const reauthenticate = async () => {\r\n        const user = authService.currentUser;\r\n        try{\r\n            let cred = await firebaseInstance.auth.EmailAuthProvider.credential(\r\n                email,\r\n                pw\r\n            );\r\n            let reauth = await user.reauthenticateWithCredential(\r\n                cred\r\n            );\r\n            if(reauth.message === undefined){\r\n                setpw(\"\");\r\n                return true\r\n            } else{\r\n                setpw(\"\");\r\n                return false\r\n            }\r\n        } catch (err){\r\n            console.log(err);\r\n        }\r\n    }\r\n    const updatepw = async () => {\r\n        let password = newpw;\r\n        authService.currentUser.updatePassword(password).then(function() {\r\n            setnewpw(\"\");\r\n            setnewpwre(\"\");\r\n            togglepage(2);\r\n        }).catch(function(err){\r\n            console.log(err);\r\n        });\r\n    };\r\n    const btnstyle1 = (over) => ({\r\n        borderRight: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n        borderTop: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n    });\r\n    const btnstyle2 = (over) => ({\r\n        borderTop: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n    });\r\n    return (\r\n        <div id=\"wrap\" className={toggleclassName()}>\r\n            <header className={`header${fix ? ' fix' : ''}`}>\r\n                <div className=\"menu-wrap\">\r\n                    <button className=\"back\" onClick={() => togglepage(0)}><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-chevron-left.svg\"} alt=\"Ïù¥Ï†ÑÏúºÎ°ú\"/></button>\r\n                    <p>{togglemenuName()}</p>\r\n                    { page < 3 ? (\r\n                        <button className=\"close\" onClick={gethome}><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-times.svg\"} alt=\"Îã´Í∏∞\"/></button>\r\n                    ) : (\r\n                        <button className=\"btn-purple-light enable\" onClick={onSubmit}>Ï†ÄÏû•</button>\r\n                    )}\r\n                    \r\n                </div>\r\n            </header>\r\n            <div className=\"content\">\r\n                { \r\n                    (() => {\r\n                    if (page === 0){\r\n                        return(\r\n                            <>\r\n                                <div className=\"form-box border-bottom\">\r\n                                    <form className=\"hover-style\"><button onClick={() => togglepage(1)}>SNS Í≥ÑÏ†ï Ï†ïÎ≥¥<img src={process.env.PUBLIC_URL + \"02-icon-03-18-px-outline-chevron-right.svg\"} alt=\"Î∞îÎ°úÍ∞ÄÍ∏∞\"/></button></form>\r\n                                    <form className=\"hover-style\"><button onClick={() => togglepage(2)}>Í∞úÏù∏ Ï†ïÎ≥¥<img src={process.env.PUBLIC_URL + \"02-icon-03-18-px-outline-chevron-right.svg\"} alt=\"Î∞îÎ°úÍ∞ÄÍ∏∞\"/></button></form>\r\n                                </div>\r\n                                <div className=\"form-box\">\r\n                                    <form className=\"hover-style\">\r\n                                        <Popup\r\n                                        trigger={<button>Î°úÍ∑∏ÏïÑÏõÉ</button>}\r\n                                        modal>\r\n                                        {close => (<div className=\"bg-opacity alert on\">\r\n                                            <div className=\"alert-wrap\">\r\n                                                <div className=\"alert-box\">\r\n                                                    <div className=\"text-box\">\r\n                                                        <p className=\"p-header\">üò® Î°úÍ∑∏ÏïÑÏõÉ ÌïòÏã§ Í±¥Í∞ÄÏöî?</p>\r\n                                                        <p className=\"p-text\">Ï†ïÎßêÎ°ú Î°úÍ∑∏ÏïÑÏõÉ ÌïòÏãúÎäî Í±∞ÎùºÎ©¥<br/>\r\n                                                            ÏïÑÏâΩÏßÄÎßå, Îã§ÏùåÏóê Îòê ÎßåÎÇòÏöî üôã‚Äç‚ôÄÔ∏è</p>\r\n                                                    </div>\r\n                                                    <div className=\"btn-box\">\r\n                                                        <button onClick={close} onMouseEnter={() => setbtnover(true)} onMouseOut={() => setbtnover(false)} style={btnstyle1(btnover)}>Ï∑®ÏÜå</button>\r\n                                                        <button onClick={onLogOutClick} onMouseEnter={() => setbtnover(true)} onMouseOut={() => setbtnover(false)} style={btnstyle2(btnover)}>Î°úÍ∑∏ÏïÑÏõÉ</button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        )}\r\n                                    </Popup></form>\r\n                                    <form className=\"hover-style\"><button onClick={getdelete}>Í≥ÑÏ†ïÏÇ≠Ï†ú</button></form>\r\n                                </div>\r\n                            </>\r\n                        );\r\n                    } else if(page === 1){\r\n                        return(\r\n                            <>\r\n                                <div className=\"form-box\">\r\n                                    <form>\r\n                                        <label for=\"insta-id\">Instagram</label>\r\n                                        <input \r\n                                            id=\"insta-id\" \r\n                                            type=\"text\" \r\n                                            name=\"instagram\"\r\n                                            value={instagram}\r\n                                            onChange={onChange}\r\n                                            placeholder=\"ÏïÑÏù¥ÎîîÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\"/>\r\n                                    </form>\r\n                                    <form>\r\n                                        <label for=\"facebook-id\">Facebook</label>\r\n                                        <input \r\n                                            id=\"facebook-id\" \r\n                                            type=\"text\"  \r\n                                            name=\"facebook\"\r\n                                            value={facebook}\r\n                                            onChange={onChange}\r\n                                            placeholder=\"ÏïÑÏù¥ÎîîÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\"/>\r\n                                    </form>\r\n                                    <form>\r\n                                        <label for=\"youtube-id\">YouTube</label>\r\n                                        <input \r\n                                            id=\"youtube-id\" \r\n                                            type=\"text\"  \r\n                                            name=\"youtube\"\r\n                                            value={youtube}\r\n                                            onChange={onChange}\r\n                                            placeholder=\"Ï±ÑÎÑê Ï£ºÏÜåÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\"/>\r\n                                    </form>\r\n                                    <form>\r\n                                        <label for=\"tiktok-id\">TikTok</label>\r\n                                        <input \r\n                                            id=\"tiktok-id\" \r\n                                            type=\"text\"  \r\n                                            name=\"tiktok\"\r\n                                            value={tiktok}\r\n                                            onChange={onChange}\r\n                                            placeholder=\"ÏïÑÏù¥ÎîîÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\"/>\r\n                                    </form>\r\n                                    <form>\r\n                                        <label for=\"twitter-id\">Twitter</label>\r\n                                        <input \r\n                                            id=\"twitter-id\" \r\n                                            type=\"text\"  \r\n                                            name=\"twitter\"\r\n                                            value={twitter}\r\n                                            onChange={onChange}\r\n                                            placeholder=\"ÏïÑÏù¥ÎîîÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\"/>\r\n                                    </form>\r\n                                </div>\r\n                                <Popup\r\n                                    trigger={<button className=\"btn-purple fix-bottom enable\">üîíÏ†ÄÏû•ÌïòÍ∏∞</button>}\r\n                                    modal\r\n                                    onClose={onSubmit2}>\r\n                                        {close => (\r\n                                            <div className=\"bg-opacity alert on\">\r\n                                                <div className=\"alert-wrap\">\r\n                                                    <div className=\"alert-box small\">\r\n                                                        <div className=\"text-box\">\r\n                                                            <p className=\"p-header\">üîí Ï†ÄÏû•ÏôÑÎ£å</p>\r\n                                                            <p className=\"p-text\">ÏûÖÎ†•ÌïòÏã† Ï†ïÎ≥¥Í∞Ä Ï†ÄÏû• ÎêòÏóàÏñ¥Ïöî üëç</p>\r\n                                                        </div>\r\n                                                        <div className=\"btn-box\">\r\n                                                            <button onClick={close}>Îã´Í∏∞</button>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                </Popup>\r\n                            </>\r\n                        );\r\n                    } else if(page === 2){\r\n                        return(\r\n                            <>\r\n                                <div className=\"form-box border-bottom\">\r\n                                    <div className=\"hover-style\">\r\n                                        <button>\r\n                                            <span>Ïù¥Î¶Ñ</span>\r\n                                            <p className=\"user-name\">{name}</p>\r\n                                            <img src={process.env.PUBLIC_URL + \"02-icon-03-18-px-outline-chevron-right.svg\"} alt=\"ÏàòÏ†ïÌïòÍ∏∞\" onClick={() => togglepage(3)}/>\r\n                                        </button>\r\n                                    </div>\r\n                                    <div className=\"hover-style\">\r\n                                        <button>\r\n                                            <span>ÏÉùÎÖÑÏõîÏùº</span>\r\n                                            <p className=\"user-birth\">{year + \". \" + month + \". \" + date}</p>\r\n                                            <img src={process.env.PUBLIC_URL + \"02-icon-03-18-px-outline-chevron-right.svg\"} alt=\"ÏàòÏ†ïÌïòÍ∏∞\" onClick={() => togglepage(4)}/>\r\n                                        </button>\r\n                                    </div>\r\n                                    <div className=\"hover-style\">\r\n                                        <button>\r\n                                            <span>ÏÑ±Î≥Ñ</span>\r\n                                            <p className=\"user-gender\">{gender == 2 ? \"ÏÑ†ÌÉùÏïàÌï®\" : (gender == 0 ? \"ÎÇ®ÏÑ±\" : \"Ïó¨ÏÑ±\")}</p>\r\n                                            <img src={process.env.PUBLIC_URL + \"02-icon-03-18-px-outline-chevron-right.svg\"} alt=\"ÏàòÏ†ïÌïòÍ∏∞\" onClick={() => togglepage(5)}/>\r\n                                        </button>\r\n                                    </div>\r\n                                    <div className=\"hover-style\">\r\n                                        <button>\r\n                                            <span>Ï£ºÏÜå</span>\r\n                                            <p className=\"user-address\">\r\n                                                <span>{address}</span>\r\n                                                <span>{subadd}</span>\r\n                                            </p>\r\n                                            <img src={process.env.PUBLIC_URL + \"02-icon-03-18-px-outline-chevron-right.svg\"} alt=\"ÏàòÏ†ïÌïòÍ∏∞\" onClick={() => togglepage(6)}/>\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-box border-bottom\">\r\n                                    <div className=\"hover-style\">\r\n                                        <button>\r\n                                            <span>Ïù¥Î©îÏùº Ï£ºÏÜå</span>\r\n                                            <p className=\"user-email\">{email}</p>\r\n                                            <img src={process.env.PUBLIC_URL + \"02-icon-03-18-px-outline-chevron-right.svg\"} alt=\"ÏàòÏ†ïÌïòÍ∏∞\" onClick={() => togglepage(7)}/>\r\n                                        </button>\r\n                                    </div>\r\n                                    <div className=\"hover-style\">\r\n                                        <button>\r\n                                            <span>ÎπÑÎ∞ÄÎ≤àÌò∏</span>\r\n                                            <p className=\"user-pw\">‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢</p>\r\n                                            <img src={process.env.PUBLIC_URL + \"02-icon-03-18-px-outline-chevron-right.svg\"} alt=\"ÏàòÏ†ïÌïòÍ∏∞\" onClick={() => togglepage(8)}/>\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                            </>\r\n                        );\r\n                    } else if(page === 3){\r\n                        return(\r\n                            <>\r\n                                <h2>Ïù¥Î¶Ñ ÏàòÏ†ïÌïòÍ∏∞</h2>\r\n                                <p>üñç ÏàòÏ†ïÌï† ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî</p>\r\n                                <div className=\"form-box\">\r\n                                    <form className={(focusname ? \"selected\" : \"\") + (name ? \" filled\" : \"\") + (error ? \" error\" : \"\")}>\r\n                                        <label for=\"user-name\">Ïù¥Î¶Ñ</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"user-name\"\r\n                                            name=\"name\"\r\n                                            className=\"input-basic\"\r\n                                            placeholder=\"Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\"\r\n                                            value={name}\r\n                                            onFocus={onFocus}\r\n                                            onBlur={onFocus}\r\n                                            onChange={onChange}/>\r\n                                        <button onClick={(e) => {\r\n                                            e.preventDefault();\r\n                                            name && setname(\"\");\r\n                                        }}></button>\r\n                                        <div className=\"message\">Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</div>\r\n                                    </form>\r\n                                </div>\r\n                                {name ? (\r\n                                    <button className=\"btn-purple fix-bottom enable\" onClick={onSubmit}>üîíÏ†ÄÏû•ÌïòÍ∏∞</button>\r\n                                ) : (\r\n                                    <button className=\"btn-purple fix-bottom\" onClick={(e) => {\r\n                                        e.preventDefault();\r\n                                        seterror(true);\r\n                                    }}>üîíÏ†ÄÏû•ÌïòÍ∏∞</button>\r\n                                )}\r\n                                \r\n                            </>\r\n                        );\r\n                    } else if(page === 4){\r\n                        return(\r\n                            <>\r\n                                <h2>ÏÉùÏùº ÏàòÏ†ïÌïòÍ∏∞</h2>\r\n                                <p>Í∞úÏù∏Ï†ïÎ≥¥Îäî Í≥µÍ∞úÎêòÏßÄ ÏïäÎäî Ï†ïÎ≥¥ÏóêÏöî ü§´<br/>\r\n                                    üñç ÏàòÏ†ïÌï† ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî</p>\r\n                                <div className=\"form-box\">\r\n                                    <p>ÏÉùÏùº</p>\r\n                                    <div className=\"birth\">\r\n                                        <form className={focusyear ? \"selected\" : \"\"}>\r\n                                            <label for=\"year\"></label>\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                id=\"year\"\r\n                                                name=\"year\"\r\n                                                min=\"1900\"\r\n                                                max=\"2020\"\r\n                                                onChange={onChange}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onFocus}\r\n                                                className=\"input-basic\"\r\n                                                placeholder=\"Ïó∞ÎèÑ\"/>\r\n                                        </form>\r\n                                        <form className={focusmonth ? \"selected\" : \"\"}>\r\n                                            <label for=\"month\"></label>\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                id=\"month\"\r\n                                                name=\"month\"\r\n                                                min=\"1\"\r\n                                                max=\"12\"\r\n                                                onChange={onChange}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onFocus}\r\n                                                className=\"input-basic\"\r\n                                                placeholder=\"Ïõî\"/>\r\n                                        </form>\r\n                                        <form className={focusdate ? \"selected\" : \"\"}>\r\n                                            <label for=\"date\"></label>\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                id=\"date\"\r\n                                                name=\"date\"\r\n                                                min=\"1\"\r\n                                                max=\"31\"\r\n                                                onChange={onChange}\r\n                                                onFocus={onFocus}\r\n                                                onBlur={onFocus}\r\n                                                className=\"input-basic\"\r\n                                                placeholder=\"Ïùº\"/>\r\n                                        </form>\r\n                                    </div>\r\n                                </div>\r\n                                {year && month && date ? (\r\n                                    <button className=\"btn-purple fix-bottom enable\" onClick={onSubmit}>üîíÏ†ÄÏû•ÌïòÍ∏∞</button>\r\n                                ) : (\r\n                                    <button className=\"btn-purple fix-bottom\">üîíÏ†ÄÏû•ÌïòÍ∏∞</button>\r\n                                )}\r\n                                \r\n                            </>\r\n                        );\r\n                    } else if(page === 5){\r\n                        return(\r\n                            <>\r\n                                <h2>ÏÑ±Î≥Ñ ÏàòÏ†ïÌïòÍ∏∞</h2>\r\n                                <p>ÏÑ±Î≥Ñ</p>\r\n                                <div className=\"form-box hover-style\">\r\n                                    <form className=\"check-circle\">\r\n                                        <input type=\"checkbox\" id=\"male\" value=\"0\" onClick={selectgender} checked={gender == 0 && \"checked\"}/>\r\n                                        <label for=\"male\">ÎÇ®Ïûê</label>\r\n                                    </form>\r\n                                    <form className=\"check-circle\">\r\n                                        <input type=\"checkbox\" id=\"female\" value=\"1\" onClick={selectgender} checked={gender == 1 && \"checked\"}/>\r\n                                        <label for=\"female\">Ïó¨Ïûê</label>\r\n                                    </form>\r\n                                    <form className=\"check-circle\">\r\n                                        <input type=\"checkbox\" id=\"none\" value=\"2\" onClick={selectgender} checked={gender == 2 && \"checked\"}/>\r\n                                        <label for=\"none\">ÏÑ†ÌÉùÏïàÌï®</label>\r\n                                    </form>\r\n                                </div>\r\n                                <button className=\"btn-purple fix-bottom enable\" onClick={onSubmit}>üîíÏ†ÄÏû•ÌïòÍ∏∞</button>\r\n                            </>\r\n                        );\r\n                    } else if(page === 6){\r\n                        return(\r\n                            <>\r\n                                <h2>Ï£ºÏÜå ÏàòÏ†ïÌïòÍ∏∞</h2>\r\n                                <p>Í∞úÏù∏Ï†ïÎ≥¥Îäî Í≥µÍ∞úÎêòÏßÄ ÏïäÎäî Ï†ïÎ≥¥ÏóêÏöî ü§´<br/>\r\n                                    üñç ÏàòÏ†ïÌï† ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî</p>\r\n                                <div className=\"form-box\">\r\n                                    <form className=\"search-address\">\r\n                                        { !search ? (\r\n                                            <>\r\n                                                <label for=\"address\">Ï£ºÏÜå</label>\r\n                                                <input \r\n                                                    type=\"text\" \r\n                                                    className=\"input-basic\" \r\n                                                    id=\"address\" \r\n                                                    value={address}\r\n                                                    placeholder=\"Ïö∞Ìé∏Î≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî\"/>\r\n                                                <button onClick={togglesearch}><img src={process.env.PUBLIC_URL + '02-icon-01-outline-search.svg'} alt=\"Í≤ÄÏÉâ\"/></button>\r\n                                            </>\r\n                                        ) : (\r\n                                            <DaumPostcode \r\n                                                onComplete={handleComplete}/>\r\n                                        )}\r\n                                        <div className=\"message\">Ïö∞Ìé∏Î≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</div>\r\n                                    </form>\r\n                                    <form className={(focussubadd ? \"selected\" : \"\") + (subadd ? \" filled\" : \"\")}>\r\n                                        <label for=\"detail-address\"></label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"input-basic\"\r\n                                            id=\"detail-address\"\r\n                                            name=\"detail-address\"\r\n                                            onChange={onChange}\r\n                                            onFocus={onFocus}\r\n                                            onBlur={onFocus}\r\n                                            placeholder=\"ÏÉÅÏÑ∏Ï£ºÏÜåÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî\" />\r\n                                        <button onClick={() => {\r\n                                            subadd && setsubadd(\"\");\r\n                                        }}></button>\r\n                                        <div className=\"message\">ÏÉÅÏÑ∏ Ï£ºÏÜåÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</div>\r\n                                    </form>\r\n                                </div>\r\n                                { address && subadd ? (\r\n                                    <button className=\"btn-purple fix-bottom enable\" onClick={onSubmit}>üîíÏ†ÄÏû•ÌïòÍ∏∞</button>\r\n                                ) : (\r\n                                    <button className=\"btn-purple fix-bottom\">üîíÏ†ÄÏû•ÌïòÍ∏∞</button>\r\n                                )}\r\n                            </>\r\n                        );\r\n                    } else if(page === 7){\r\n                        return(\r\n                            <>\r\n                                <h2>Ïù¥Î©îÏùº ÏàòÏ†ïÌïòÍ∏∞</h2>\r\n                                <p>üñç ÏàòÏ†ïÌï† ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî</p>\r\n                                <div className=\"form-box\">\r\n                                    <form className={(focusemail ? \"selected\" : \"\") + (email ? \" filled\" : \"\")}>\r\n                                        <label for=\"user-email\">Ïù¥Î©îÏùº</label>\r\n                                        <input\r\n                                            type=\"email\"\r\n                                            className=\"input-basic\"\r\n                                            id=\"user-email\"\r\n                                            name=\"user-email\"\r\n                                            onFocus={onFocus}\r\n                                            onBlur={onFocus}\r\n                                            onChange={onChange}\r\n                                            value={email} />\r\n                                        <button onClick={(e) => {\r\n                                            e.preventDefault();\r\n                                            email && setemail(\"\");\r\n                                        }}></button>\r\n                                        <div className=\"message\">Ïù¥Î©îÏùº ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏïÑÏöî</div>\r\n                                    </form>\r\n                                </div>\r\n                                { email ? (\r\n                                    <button className=\"btn-purple fix-bottom enable\" onClick={onSubmit}>üîíÏ†ÄÏû•ÌïòÍ∏∞</button>\r\n                                ) : (\r\n                                    <button className=\"btn-purple fix-bottom\">üîíÏ†ÄÏû•ÌïòÍ∏∞</button>\r\n                                )}\r\n                                \r\n                            </>\r\n                        );\r\n                    } else if(page === 8){\r\n                        return(\r\n                            <>\r\n                                <h2>ÎπÑÎ∞ÄÎ≤àÌò∏ ÏàòÏ†ïÌïòÍ∏∞</h2>\r\n                                <p>Ï†ïÎ≥¥Î•º ÏïàÏ†ÑÌïòÍ≤å Î≥¥Ìò∏ÌïòÍ∏∞ ÏúÑÌï¥<br/>\r\n                                    Î≥∏Ïù∏ÏûÑÏùÑ Ïù∏Ï¶ùÌï¥ Ï£ºÏÑ∏Ïöî</p>\r\n                                <div className=\"form-box\">\r\n                                    <form className={(focuspw ? \"selected\" : \"\") + (pwshow ? \" pw-veiw\" : \" pw-hide\") + (error ? \" error\" : \"\")}>\r\n                                        <label for=\"user-pw\">ÎπÑÎ∞ÄÎ≤àÌò∏</label>\r\n                                        <input\r\n                                            type={pwshow ? \"text\" : \"password\"}\r\n                                            className=\"input-basic\"\r\n                                            id=\"user-email\"\r\n                                            name=\"pw\"\r\n                                            onChange={onChange}\r\n                                            onFocus={onFocus}\r\n                                            onBlur={onFocus}\r\n                                            placeholder=\"\" />\r\n                                        <button onClick={(e) => {\r\n                                            e.preventDefault()\r\n                                            setpwshow((prev) => !prev);\r\n                                        }}></button>\r\n                                        <div className=\"message\">ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏïÑÏöî</div>\r\n                                    </form>\r\n                                </div>\r\n                                {pw.length>0 ? (\r\n                                    <button className=\"btn-basic next enable\" onClick={async () => {(await reauthenticate() ? togglepage(9) : seterror(true))}}>Í≥ÑÏÜç</button>\r\n                                ) : (\r\n                                    <button className=\"btn-basic next\">Í≥ÑÏÜç</button>\r\n                                )}\r\n                                \r\n                            </>\r\n                        );\r\n                    } else if(page === 9){\r\n                        return(\r\n                            <>\r\n                                <h2>ÎπÑÎ∞ÄÎ≤àÌò∏ ÏàòÏ†ïÌïòÍ∏∞</h2>\r\n                                <p>ÏÉàÎ°úÏö¥ ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Î≥ÄÍ≤ΩÌïòÍ≤†ÏäµÎãàÎã§ ü§ì<br/>\r\n                                    ÏïûÏúºÎ°ú Î°úÍ∑∏Ïù∏Ìï† Îïå Î≥ÄÍ≤ΩÌïú ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî</p>\r\n                                <div className=\"form-box\">\r\n                                    <form className={(focusnewpw ? \"selected\" : \"\") + (newpwshow ? \" pw-veiw\" : \" pw-hide\")}>\r\n                                        <label for=\"new-user-pw\">ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏<span className=\"required\">*</span></label>\r\n                                        <input\r\n                                            type={newpwshow ? \"text\" : \"password\"}\r\n                                            className=\"input-basic\"\r\n                                            id=\"new-user-pw\"\r\n                                            name=\"new-pw\"\r\n                                            value={newpw}\r\n                                            onChange={onChange}\r\n                                            onFocus={onFocus}\r\n                                            onBlur={onFocus}\r\n                                            placeholder=\"ÏÉàÎ°≠Í≤å ÏÑ§Ï†ïÌï† ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî\" />\r\n                                        <button onClick={(e) => {\r\n                                            e.preventDefault();\r\n                                            setnewpwshow((prev) => !prev);\r\n                                        }}></button>\r\n                                        <div className=\"message\">8Ïûê Ïù¥ÏÉÅ, ÏÜåÎ¨∏Ïûê Ïà´ÏûêÍ∞Ä Ìè¨Ìï®ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§</div>\r\n                                    </form>\r\n                                </div>\r\n                                <div className=\"form-box\">\r\n                                    <form className={(focusnewpwre ? \"selected\" : \"\") + (newpwreshow ? \" pw-veiw\" : \" pw-hide\") + (newpw !== newpwre ? \" error\" : \"\")}>\r\n                                        <label for=\"new-user-pw-re\">ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏<span class=\"required\">*</span></label>\r\n                                        <input\r\n                                            type={newpwreshow ? \"text\" : \"password\"}\r\n                                            className=\"input-basic\"\r\n                                            id=\"new-user-pw-re\"\r\n                                            name=\"new-pw-re\"\r\n                                            value={newpwre}\r\n                                            onChange={onChange}\r\n                                            onFocus={onFocus}\r\n                                            onBlur={onFocus}\r\n                                            placeholder=\"ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî\" />\r\n                                        <button onClick={(e) => {\r\n                                            e.preventDefault();\r\n                                            setnewpwreshow((prev) => !prev);\r\n                                        }}></button>\r\n                                        <div className=\"message\">ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏïÑÏöî</div>\r\n                                    </form>\r\n                                </div>\r\n                                { (newpw === newpwre) && newpw ? (\r\n                                    <button className=\"btn-purple fix-bottom enable\" onClick={updatepw}>üîíÏ†ÄÏû•ÌïòÍ∏∞</button>\r\n                                ) : (\r\n                                    <button className=\"btn-purple fix-bottom\">üîíÏ†ÄÏû•ÌïòÍ∏∞</button>\r\n                                )}\r\n                                \r\n                            </>\r\n                        );\r\n                    }\r\n                })()\r\n            }     \r\n            </div>\r\n            <footer className=\"footer\"></footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\routes\\Home.js",["102","103","104"],"import { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Popup from 'reactjs-popup';\r\nimport CardDragList from \"components/CardDragList\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Home = ({refreshUser, userObj}) => {\r\n    const history = useHistory();\r\n    const [nweets, setNweets] = useState([]);\r\n    const [init, setinit] = useState(false);\r\n    const [isDelete ,setisDelete] = useState(false);\r\n    const [fix, setfix] = useState(false);\r\n    const [delcards, setdelcards] = useState([]); \r\n    const [btnover, setbtnover] = useState(false);\r\n    const handleScroll = () => {\r\n        const {pageYOffset} = window;\r\n        setfix(pageYOffset > 0);\r\n    };\r\n    useEffect(async () => {\r\n        await dbService.collection(\"nweets\").onSnapshot(snapshot => {\r\n            const nweetArray = snapshot.docs.map((doc) => ({\r\n                id:doc.id, \r\n                ...doc.data(),\r\n            }));\r\n            setNweets(nweetArray);\r\n        });\r\n        window.addEventListener('scroll', handleScroll);\r\n        setinit(true);\r\n    }, []);\r\n    const toggleaddcard1 = () => history.push(\"/addcard\");\r\n    const toggleaddcard2 = () => history.push(\"/addnotice\");\r\n    const togglemenu1 = () => history.push(\"/Profile\");\r\n    const togglemenu2 = () => history.push(\"/help\");\r\n    const toggleisDelete = () => setisDelete((prev) => !prev);\r\n    const toggleuser = () => history.push(\"/user\");\r\n    const adddelcard = (cardid) => {\r\n        let cardArray = delcards;\r\n        if(!cardArray.includes(cardid)){\r\n            cardArray = [cardid,\r\n                ...cardArray];\r\n        }\r\n        else cardArray = cardArray.filter(id => id!==cardid);\r\n        setdelcards(cardArray);\r\n    }\r\n    const alldelcard = () => {\r\n        if(delcards.length === nweets.length){\r\n            setdelcards([]);\r\n        } else {\r\n            let cardArray = [];\r\n            nweets.map((card) => {\r\n                cardArray.push(card.id);\r\n            });\r\n            setdelcards(cardArray);\r\n        }\r\n    }\r\n    const emptydelcard = () => setdelcards([]);\r\n    const deletecards = async () => {\r\n        let cardArray = delcards;\r\n        await cardArray.map((card) => {\r\n            dbService.doc(`nweets/${card}`).delete();\r\n        });\r\n        setdelcards([]);\r\n        history.push(\"/\");\r\n    }\r\n    const btnstyle1 = (over) => ({\r\n        borderRight: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n        borderTop: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n    });\r\n    const btnstyle2 = (over) => ({\r\n        borderTop: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n    });\r\n    return (\r\n        <div id=\"wrap\" className={\"admin-home\" + (!nweets.length ? \" admin-home-empty\" : \"\")}>\r\n            <header className={`header${fix ? ' fix' : ''}`}>\r\n                <div className=\"menu-wrap home-menu-btn\">\r\n                    <Popup\r\n                        trigger={<p className=\"user-name\">{userObj.displayName}</p>}\r\n                        modal>\r\n                        { close => (\r\n                            <div className=\"bg-opacity alert on\">\r\n                                <div className=\"alert-wrap\">\r\n                                    <div className=\"alert-box\">\r\n                                        <div className=\"text-box\">\r\n                                            <p className=\"p-header\">@{userObj.displayName}</p>\r\n                                            <p className=\"p-text\">ÎßÅÌÅ¨ Ï£ºÏÜåÍ∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.<br/>\r\n                                                Î∞îÎ°ú Ïù¥ÎèôÌï†ÍπåÏöî?</p>\r\n                                        </div>\r\n                                        <div className=\"btn-box\">\r\n                                            <button onClick={close} onMouseEnter={() => setbtnover(true)} onMouseOut={() => setbtnover(false)} style={btnstyle1(btnover)}>Îã´Í∏∞</button>\r\n                                            <button onClick={toggleuser} onMouseEnter={() => setbtnover(true)} onMouseOut={() => setbtnover(false)} style={btnstyle2(btnover)}>Î∞îÎ°úÏù¥Îèôüëâ</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Popup>\r\n                    <p><span className=\"admin\">Admin</span>with by <u>brity</u></p>\r\n                    <button type=\"submit\" className=\"menu\">\r\n                        <Popup\r\n                            trigger={<img src={process.env.PUBLIC_URL + \"02-icon-01-outline-bars.svg\"} alt=\"menu\"/>}\r\n                            modal\r\n                            closeOnDocumentClick>\r\n                            <nav className=\"bg-opacity on\" style={{height: \"calc(100% - 186px)\"}}>\r\n                                <div className=\"sheet-wrap nav-sheet\">\r\n                                    <div className=\"sheet-box\">\r\n                                        <button className=\"drag-btn\"><span></span></button>\r\n                                        <div className=\"sheet-name\">Î©îÎâ¥</div>\r\n                                        <ul className=\"sheet-list\">\r\n                                            <li><button onClick={togglemenu1}>üõ† ÎÇ¥ Í≥ÑÏ†ï Í¥ÄÎ¶¨</button></li>\r\n                                            <li><button onClick={togglemenu2}>üßë‚Äçüîß Í≥†Í∞ù ÎèÑÏõÄ</button></li>\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                            </nav>\r\n                        </Popup>\r\n                    </button>\r\n                </div>\r\n                <div className=\"del-wrap\">\r\n                    <div className=\"del-text-box\">\r\n                        <button><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-check-000.svg\"} alt=\"Ï≤¥ÌÅ¨\"/>Ïπ¥ÎìúÏÑ†ÌÉù Î∞è ÏÇ≠Ï†ú</button>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n            <div className=\"content\">\r\n                {(init ? (\r\n                    <>\r\n                        {(nweets.length > 0 ? (\r\n                            <>\r\n                                <div className=\"del-text-box\">\r\n                                    <Popup\r\n                                        trigger={<button><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-check-000.svg\"} alt=\"Ï≤¥ÌÅ¨\"/>Ïπ¥ÎìúÏÑ†ÌÉù Î∞è ÏÇ≠Ï†ú</button>}\r\n                                        closeOnDocumentClick={false}\r\n                                        onOpen={toggleisDelete}\r\n                                        onClose={() => {\r\n                                            toggleisDelete();\r\n                                            emptydelcard();\r\n                                        }}>\r\n                                        { close => (\r\n                                            <div className=\"card-del-wrap on\">\r\n                                                <div className=\"card-del-box\">\r\n                                                    <button onClick={close}><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-times.svg\"} alt=\"Îã´Í∏∞\"/></button>\r\n                                                    {delcards.length > 0 ? (\r\n                                                        <p className=\"del-message on\"><span className=\"count\">{delcards.length}</span>Í∞úÏùò Ïπ¥ÎìúÍ∞Ä ÏÑ†ÌÉù ÎêòÏóàÏñ¥Ïöî</p>\r\n                                                    ) : (\r\n                                                        <p className=\"del-message \"><span className=\"count\"></span>ÏÇ≠Ï†úÌï† Ïπ¥ÎìúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</p>\r\n                                                    )}\r\n                                                    <form className=\"check-circle-all-del\">\r\n                                                        <input type=\"checkbox\" id=\"all-del\" onClick={alldelcard} checked={delcards.length === nweets.length && \"checked\"}/>\r\n                                                        <label for=\"all-del\" className=\"all-del\" >Ï†ÑÏ≤¥ ÏÑ†ÌÉù</label>\r\n                                                    </form>\r\n                                                    <div className=\"btn-wrap\">\r\n                                                        { delcards.length > 0 ? (\r\n                                                            <>\r\n                                                                <button className=\"btn-purple enable\" onClick={emptydelcard}>ÏÑ†ÌÉù Ìï¥Ï†ú</button>\r\n                                                                <button className=\"btn-purple-filled enable\" onClick={deletecards}>ÏÑ†ÌÉù ÏÇ≠Ï†úÌïòÍ∏∞</button>\r\n                                                            </>\r\n                                                        ) : (\r\n                                                            <>\r\n                                                                <button className=\"btn-purple\">ÏÑ†ÌÉù Ìï¥Ï†ú</button>\r\n                                                                <button className=\"btn-purple-filled\">ÏÑ†ÌÉù ÏÇ≠Ï†úÌïòÍ∏∞</button>\r\n                                                            </>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </Popup>\r\n                                </div>\r\n                                <div className=\"card-wrap\">\r\n                                    {!isDelete ? (\r\n                                        <CardDragList nweets={nweets}/>\r\n                                    ) : (\r\n                                        nweets.map((nweet) => (\r\n                                            <div \r\n                                                className={\"card\" + (delcards.includes(nweet.id) ? \" del\" : \"\")} \r\n                                                style={nweet.cardcolor ? (\r\n                                                    {background:nweet.cardcolor}\r\n                                                ) : ({\r\n                                                        background: `url(${nweet.cardImage})`,\r\n                                                        backgroundSize: \"cover\",\r\n                                                        backgroundRepeat: \"no-repeat\",\r\n                                                        backgroundPosition: \"center center\",\r\n                                                    })}>\r\n                                                <h3>{nweet.subtitle}</h3>\r\n                                                <button onClick={() => adddelcard(nweet.id)}>\r\n                                                    { delcards.includes(nweet.id) ? (\r\n                                                        <img src={process.env.PUBLIC_URL + \"02-icon-02-solid-check-circle.svg\"} alt=\"ÏÇ≠Ï†ú Ï≤¥ÌÅ¨\" />\r\n                                                    ) : (\r\n                                                        <img src={process.env.PUBLIC_URL + \"02-icon-01-outline-arrows.svg\"} alt=\"Ïù¥Îèô ÌôîÏÇ¥Ìëú\" />\r\n                                                    )}\r\n                                                    </button>\r\n                                                <p>{nweet.title}</p>\r\n                                            </div>\r\n                                        ))\r\n                                    )}\r\n                                    <div className={\"style-box\" + (isDelete ? \" on\" : \"\")}></div>\r\n                                </div>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <div className=\"empty-box\">\r\n                                    <p>üíÅ</p>\r\n                                    <p>ÏÉùÏÑ±Îêú Ïπ¥ÎìúÍ∞Ä ÏïÑÏßÅ ÏóÜÏñ¥Ïöî</p>\r\n                                    <p>Î≤ÑÌäºÏùÑ ÎàåÎü¨ ÏÉàÎ°úÏö¥ Ïπ¥ÎìúÎ•º<br/>\r\n                                        ÎßåÎì§Ïñ¥ Î≥ºÍπåÏöî?</p>\r\n                                </div>\r\n                            </>\r\n                        ))}\r\n                    <div className={\"ad-card-btn\" + (!nweets.length ? \" emrty-ani\" : \"\")}>\r\n                    <img src={process.env.PUBLIC_URL + \"02-icon-01-outline-plus.svg\"} alt=\"Ïπ¥ÎìúÎßåÎì§Í∏∞\"/>\r\n                    <Popup\r\n                        trigger={<p>Ïπ¥ÎìúÎßåÎì§Í∏∞</p>}\r\n                        modal\r\n                        >\r\n                        { close => (\r\n                            <div className=\"bg-opacity on\" style={{height: \"calc(100% - 186px)\"}}>\r\n                                <div className=\"sheet-wrap ad-card\">\r\n                                    <div className=\"sheet-box\">\r\n                                        <button className=\"drag-btn\"><span></span></button>\r\n                                        <div className=\"sheet-name\">Î©îÎâ¥</div>\r\n                                        <ul className=\"sheet-list\">\r\n                                            <li><button onClick={() => {\r\n                                                close();\r\n                                                toggleaddcard1();\r\n                                                }}>üîó ÎßÅÌÅ¨ Ïπ¥Îìú ÎßåÎì§Í∏∞</button></li>\r\n                                            <li><button onClick={() => {\r\n                                                close();\r\n                                                toggleaddcard2();\r\n                                                }}>üì¢ Í≥µÏßÄ Ïπ¥Îìú ÎßåÎì§Í∏∞</button></li>\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Popup>\r\n                </div>\r\n                </>\r\n                ) : (\r\n                    \"Î°úÎî©Ï§ë ÏûÖÎãàÎã§...\"\r\n                ))    \r\n                }\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Home;","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\CardDragList.js",["105"],"import React, { useEffect, useState } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst CardDragList = ({nweets, isDelete}) => {\r\n    const history = useHistory();\r\n    const [Cardlist, setlist] = useState([]);\r\n    useEffect(() => {\r\n        setlist(nweets);\r\n    }, []);\r\n    const reorder = (list, startIndex, endIndex) => {\r\n        const result = Array.from(list);\r\n        const [removed] = result.splice(startIndex, 1);\r\n        result.splice(endIndex, 0, removed);\r\n\r\n        return result;\r\n    };\r\n\r\n    const getItemStyle = (isDragging, draggableStyle, color) => ({\r\n        userSelect: \"none\",\r\n        boxShadow: isDragging && \"0 8px 15px 0 rgba(0, 0, 0, 0.2), 0 5px 8px 0 rgba(0, 0, 0, 0.3)\",\r\n        backgroundImage: color,\r\n        opacity: isDragging ? \"0\" : \"1\",\r\n\r\n        ...draggableStyle\r\n    });\r\n    const getItemStyle2 = (isDragging, draggableStyle, image) => ({\r\n        userSelect: \"none\",\r\n        boxShadow: isDragging && \"0 8px 15px 0 rgba(0, 0, 0, 0.2), 0 5px 8px 0 rgba(0, 0, 0, 0.3)\",\r\n        background: `url(${image})`,\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundPosition: \"center center\",\r\n        opacity: isDragging ? \"0\" : \"1\",\r\n\r\n        ...draggableStyle\r\n    });\r\n\r\n    const getListStyle = isDraggingOver => ({\r\n    });\r\n\r\n    const onDragEnd = (result) => {\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n\r\n        const Cardlists = reorder(\r\n            Cardlist,\r\n            result.source.index,\r\n            result.destination.index\r\n        );\r\n        setlist(Cardlists);\r\n    };\r\n    return (\r\n        <>\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n                {(provided, snapshot) => (\r\n                    <div\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                        style={getListStyle(snapshot.isDraggingOver)}>\r\n                        {Cardlist.map((nweet, index) => (\r\n                            <Draggable key={nweet.id} draggableId={nweet.id} index={index}>\r\n                                {(provided, snapshot) => (\r\n                                    <div\r\n                                        className={\"card\" + (isDelete ? \" del\" : \"\")}\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        style={nweet.cardcolor ? getItemStyle(\r\n                                            snapshot.isDragging,\r\n                                            provided.draggableProps.style,\r\n                                            nweet.cardcolor,\r\n                                        ) : getItemStyle2(\r\n                                            snapshot.isDragging,\r\n                                            provided.draggableProps.style,\r\n                                            nweet.cardImage,\r\n                                        )}\r\n                                        onClick={(e) => {\r\n                                            e.preventDefault();\r\n                                            if(nweet.link) history.push(\"/edit/\" + nweet.id);\r\n                                            else history.push(\"/edit2/\" + nweet.id);\r\n                                        }}>\r\n                                        <h3>{nweet.subtitle}</h3>\r\n                                        {isDelete ? (\r\n                                            <button><img src={process.env.PUBLIC_URL + \"02-icon-02-solid-check-circle.svg\"} alt=\"ÏÇ≠Ï†ú Ï≤¥ÌÅ¨\"></img></button>\r\n                                        ) : (\r\n                                            <button><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-arrows.svg\"} alt=\"Ïù¥ÎèôÌôîÏÇ¥Ìëú\"></img></button>\r\n                                        )}       \r\n                                        <p>{nweet.title}</p>\r\n                                    </div>\r\n                                )}\r\n                            </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default CardDragList;","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Customerhelp.js",[],"C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\routes\\AccountDelete.js",["106"],"import { authService, firebaseInstance } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Popup from \"reactjs-popup\";\r\n\r\nconst AccountDelete = ({refreshUser}) => {\r\n    const history = useHistory();\r\n    const [Proceeding, setProceeding] = useState(false);\r\n    const [btnover, setbtnover] = useState(false);\r\n    const [check, setcheck] = useState(false);\r\n    const [password, setpassword] = useState(\"\");\r\n    const [pwshow, setpwshow] = useState(false);\r\n    const [focuspassword, setfocuspassword] = useState(false);\r\n    const [error, seterror] = useState(false);\r\n    const getback = () => history.push(\"/Profile\");\r\n    const gethome = () => history.push(\"/\");\r\n    const toggleProceeding = () => setProceeding((prev) => !prev);\r\n\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if(name === \"password\"){\r\n            setpassword(value);\r\n        }\r\n    }\r\n    const reauthenticate = async () => {\r\n        const user = authService.currentUser;\r\n        try{\r\n            let cred = await firebaseInstance.auth.EmailAuthProvider.credential(\r\n                user.email,\r\n                password\r\n            );\r\n            let reauth = await user.reauthenticateWithCredential(\r\n                cred\r\n            );\r\n            if(reauth.message === undefined){\r\n                setpassword(\"\");\r\n                return true\r\n            } else{\r\n                seterror(true);\r\n                return false\r\n            }\r\n        } catch (err){\r\n            console.log(err);\r\n        }\r\n    }\r\n    const accountDelete = () => {\r\n        const user = authService.currentUser;\r\n        user.delete().then(function() {\r\n            history.push(\"/\");\r\n            refreshUser();\r\n        }).catch(function(error) {\r\n            console.log(error);\r\n        });\r\n    }\r\n    const btnstyle1 = (over) => ({\r\n        borderRight: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n        borderTop: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n    });\r\n    const btnstyle2 = (over) => ({\r\n        borderTop: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n    });\r\n    return(\r\n        <div id=\"wrap\" className={\"ad-card account-delete \" + (!Proceeding ? \"\" : \"account-delete02 \") + \"account\"}>\r\n            <header className=\"header\">\r\n                <div className=\"menu-wrap\">\r\n                    <button className=\"back\" onClick={getback}><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-chevron-left.svg\"} alt=\"Ïù¥Ï†ÑÏúºÎ°ú\"/></button>\r\n                    <p>Í≥ÑÏ†ïÏÇ≠Ï†ú</p>\r\n                    <button className=\"close\" onClick={gethome}><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-times.svg\"} alt=\"Îã´Í∏∞\"/></button>\r\n                </div>\r\n            </header>\r\n            <div className=\"content\">\r\n                { !Proceeding ? (\r\n                    <>\r\n                        <h2>\r\n                            <span className=\"user-name\">{authService.currentUser.email}</span>ÎãòÏùò Í≥ÑÏ†ïÏùÑ ÏÇ≠Ï†úÌï©ÎãàÎã§<br/>\r\n                            Í≥ÑÏ†ïÏÇ≠Ï†ú Ï†Ñ, ÏïÑÎûò ÎÇ¥Ïö©ÏùÑ Íº≠ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî\r\n                        </h2>\r\n                        <ul className=\"text-box\">\r\n                            <li>üì¢ Í≥ÑÏ†ïÏÇ≠Ï†ú ÏïàÎÇ¥ÏÇ¨Ìï≠</li>\r\n                            <li>üëâ Î∏åÎ¶¨Ìã∞Í≥ÑÏ†ï ÏÇ≠Ï†ú Ïãú Ìï¥Îãπ Í≥ÑÏ†ïÏúºÎ°ú Ïù¥Ïö©ÌïòÎçò ÏÑúÎπÑÏä§Ïùò Ïù¥Ïö©Í≥ÑÏïΩÏù¥ Ìï¥ÏßÄÎêòÏñ¥ ÎçîÎäî Ïù¥Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.</li>\r\n                            <li>üëâ Î∏åÎ¶¨Ìã∞Í≥ÑÏ†ï Ï†ïÎ≥¥ Î∞è Ïù¥Ïö©ÌïòÏòÄÎçò Í∞úÎ≥Ñ ÏÑúÎπÑÏä§ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎê©ÎãàÎã§.</li>\r\n                            <li>üëâ ÌÉàÌá¥Ìïú ÌöåÏõêÏùò Ï†ïÎ≥¥ÏôÄ ÏÑúÎπÑÏä§ Ïù¥Ïö©Í∏∞Î°ùÏùÄ Î≥µÍµ¨Ìï† Ïàò ÏóÜÏúºÎ©∞ ÏùºÍ¥Ñ ÏÇ≠Ï†ú Ï≤òÎ¶¨Îê©ÎãàÎã§.</li>\r\n                        </ul>\r\n                        <form className=\"check-circle\">\r\n                            <input type=\"checkbox\" id=\"ddd\" onClick={() => setcheck((prev) => !prev)} checked={check && \"checked\"}/>\r\n                            <label for=\"ddd\">ÏúÑ ÎÇ¥Ïö©ÏùÑ Î™®Îëê ÌôïÏù∏ ÌñàÏäµÎãàÎã§, Ïù¥Ïóê ÎèôÏùòÌïòÎ©∞ Í≥ÑÏ†ïÏÇ≠Ï†úÎ•º ÏßÑÌñâÌïòÍ≤†ÏäµÎãàÎã§.</label>\r\n                        </form>\r\n                        {check ? (\r\n                            <button className=\"btn-basic enable\" onClick={toggleProceeding}>ÏÇ≠Ï†úÌïòÍ∏∞</button>\r\n                        ) : (\r\n                            <button className=\"btn-basic\">ÏÇ≠Ï†úÌïòÍ∏∞</button>\r\n                        )}\r\n                        \r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <h2>\r\n                            Ï†ïÎ≥¥Î•º ÏïàÏ†ÑÌïòÍ≤å Î≥¥Ìò∏ÌïòÍ∏∞ ÏúÑÌï¥<br/>\r\n                            Í≥ÑÏ†ïÏÇ≠Ï†ú Ï†Ñ, Î≥∏Ïù∏ÏûÑÏùÑ Ïù∏Ï¶ùÌï¥ Ï£ºÏÑ∏Ïöî\r\n                        </h2>\r\n                        <div className=\"form-box\">\r\n                            <form className={(focuspassword ? \"selected\" : \"\") + (pwshow ? \" pw-veiw\" : \" pw-hide\") + (error ? \" error\" : \"\")}>\r\n                                <label for=\"login-pw\">ÎπÑÎ∞ÄÎ≤àÌò∏</label>\r\n                                <input \r\n                                    type={pwshow ? \"text\" : \"password\"}\r\n                                    className=\"input-basic\" \r\n                                    id=\"login-pw\" \r\n                                    name=\"password\"\r\n                                    onChange={onChange}\r\n                                    onFocus={() => setfocuspassword(false)}\r\n                                    onBlur={() => setfocuspassword(true)}\r\n                                    value={password}\r\n                                    placeholder=\"ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî\"/>\r\n                                <button onClick={() => setpwshow((prev) => !prev)}></button>\r\n                                <div className=\"message\">ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏïÑÏöî</div>\r\n                            </form>\r\n                        </div>\r\n                        {password ? (\r\n                            <Popup\r\n                            trigger={<button className=\"btn-basic enable\">ÏôÑÎ£åÌïòÍ∏∞</button>}\r\n                            modal\r\n                            onClose={() => history.push(\"/profile\")}>\r\n                                { close => (\r\n                                    <div className=\"bg-opacity alert on\">\r\n                                        <div className=\"alert-wrap\">\r\n                                            <div className=\"alert-box\">\r\n                                                <div className=\"text-box\">\r\n                                                    <p className=\"p-header\">Í≥ÑÏ†ïÏÇ≠Ï†ú.. ÌïòÏã§ Í±¥Í∞ÄÏöî?</p>\r\n                                                    <p className=\"p-text\">ÏïÑÏâΩÏßÄÎßå, Îã§ÏùåÏóê Îçî Î∞úÏ†ÑÎêú Î™®ÏäµÏúºÎ°ú Ï∞æÏïÑÎµôÍ≤†ÏäµÎãàÎã§üôá‚Äç‚ôÄÔ∏è Íº≠ Îã§Ïãú ÎßåÎÇòÏöî!</p>\r\n                                                </div>\r\n                                                <div className=\"btn-box\">\r\n                                                    <button onClick={close} onMouseEnter={() => setbtnover(true)} onMouseOut={() => setbtnover(false)} style={btnstyle1(btnover)}>Ï∑®ÏÜå‚ù§Ô∏è</button>\r\n                                                    <button onClick={accountDelete} onMouseEnter={() => setbtnover(true)} onMouseOut={() => setbtnover(false)} style={btnstyle2(btnover)}>Í≥ÑÏ†ïÏÇ≠Ï†ú</button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </Popup>\r\n                        ) : (\r\n                            <button className=\"btn-basic\">ÏôÑÎ£åÌïòÍ∏∞</button>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AccountDelete;","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\routes\\UserHome.js",["107"],"import { dbService } from \"fbase\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Popup from \"reactjs-popup\";\r\n\r\nconst UserHome = ({userObj}) => {\r\n    const history = useHistory();\r\n    const [nweets, setNweets] = useState([]);\r\n    const [fix, setfix] = useState(false);\r\n    const [check, setcheck] = useState(true);\r\n    const ref = useRef(null);\r\n    const handleScroll = () => {\r\n        if(ref.current) {\r\n            setfix(ref.current.getBoundingClientRect().top <= 0);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        dbService.collection(\"nweets\").onSnapshot(snapshot => {\r\n            const nweetArray = snapshot.docs.map((doc) => ({\r\n                id:doc.id, \r\n                ...doc.data(),\r\n            }));\r\n            setNweets(nweetArray);\r\n        });\r\n        window.addEventListener('scroll', handleScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', () => handleScroll);\r\n        };\r\n    }, []);\r\n    return(\r\n        <div id=\"wrap\" className=\"user-home admin-home\">\r\n            <header className={`header${fix ? ' fix' : ''}`} ref={ref}>\r\n                <div className=\"menu-wrap home-menu-btn\">\r\n                    <Popup\r\n                        trigger={<p className=\"user-name\">{userObj.displayName}</p>}\r\n                        modal>\r\n                        { close => (\r\n                            <div className=\"bg-opacity alert on\">\r\n                                <div className=\"alert-wrap\">\r\n                                    <div className=\"alert-box small\">\r\n                                        <div className=\"text-box\">\r\n                                            <p className=\"p-header\">@{userObj.displayName}</p>\r\n                                            <p className=\"p-text\">ÎßÅÌÅ¨ Ï£ºÏÜåÍ∞Ä Î≥µÏÇ¨ÎêòÏóàÏñ¥Ïöî</p>\r\n                                        </div>\r\n                                        <div className=\"btn-box\">\r\n                                            <button onClick={close}>Îã´Í∏∞</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Popup>\r\n                    <p>with by <u>brity</u></p>\r\n                    <button className=\"menu\">\r\n                        <Popup\r\n                            trigger={<img src={process.env.PUBLIC_URL + \"02-icon-01-outline-bars.svg\"} alt=\"menu\"/>}\r\n                            modal\r\n                            closeOnDocumentClick>\r\n                            <nav className=\"bg-opacity on\" style={{height: \"calc(100% - 200px)\"}}>\r\n                                <div className=\"sheet-wrap sns-sheet\">\r\n                                    <div className=\"sheet-box\">\r\n                                        <button className=\"drag-btn\"><span></span></button>\r\n                                        <div className=\"sheet-name\">SNS</div>\r\n                                        <ul className=\"sheet-list\">\r\n                                            { check ? (\r\n                                                <>\r\n                                                    <li>\r\n                                                        <button>\r\n                                                            <img src={process.env.PUBLIC_URL + \"instagram-icon.svg\"} alt=\"instagram\"/>\r\n                                                            <p>Instagram</p>\r\n                                                        </button>\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        <button>\r\n                                                            <img src={process.env.PUBLIC_URL + \"facebook-icon.svg\"} alt=\"facebook\"/>\r\n                                                            <p>facebook</p>\r\n                                                        </button>\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        <button>\r\n                                                            <img src={process.env.PUBLIC_URL + \"youtube-icon.svg\"} alt=\"youtube\"/>\r\n                                                            <p>youtube</p>\r\n                                                        </button>\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        <button>\r\n                                                            <img src={process.env.PUBLIC_URL + \"tiktok-icon.svg\"} alt=\"Tiktok\"/>\r\n                                                            <p>tiktok</p>\r\n                                                        </button>\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        <button>\r\n                                                            <img src={process.env.PUBLIC_URL + \"twitter-icon.svg\"} alt=\"twitter\"/>\r\n                                                            <p>twitter</p>\r\n                                                        </button>\r\n                                                    </li>\r\n                                                </>\r\n                                            ) : (\r\n                                                <li className=\"none-sns-message\">ÌòÑÏû¨ Îì±Î°ùÎêú SNS Ï£ºÏÜåÍ∞Ä ÏóÜÏñ¥ÏöîüòØ</li>\r\n                                            )}\r\n                                        </ul>\r\n                                        <p>go to. <u>Brity</u></p>\r\n                                    </div>\r\n                                </div>\r\n                            </nav>\r\n                        </Popup>\r\n                    </button>\r\n                </div>\r\n            </header>\r\n            <div className=\"content\">\r\n                {\r\n                    (nweets.length > 0 ? (\r\n                        nweets.map((nweet) => (\r\n                            <div className=\"card\"\r\n                                style={nweet.cardcolor ? (\r\n                                    {background:nweet.cardcolor}\r\n                                ) : ({\r\n                                        background: `url(${nweet.cardImage})`,\r\n                                        backgroundSize: \"cover\",\r\n                                        backgroundRepeat: \"no-repeat\",\r\n                                        backgroundPosition: \"center center\",\r\n                                })}\r\n                                onClick={(e) => {\r\n                                    e.preventDefault();\r\n                                    let link\r\n                                    if(nweet.link){\r\n                                        link = nweet.link;\r\n                                        \r\n                                        if(link.indexOf('https://') === -1){\r\n                                            link = \"https://\" + link;\r\n                                            console.log(link);\r\n                                        } \r\n                                        \r\n                                        window.location.href=link;\r\n                                    } else {\r\n                                        link = nweet.id;\r\n                                        history.push(\"/notice/\" + link);\r\n                                    }\r\n                                }}>\r\n                                <h3>{nweet.subtitle}</h3>\r\n                                <p>{nweet.title}</p>\r\n                            </div>\r\n                        ))\r\n                    ) : (\r\n                        <>\r\n                            <div className=\"empty-box\">\r\n                                <p>üíÅ</p>\r\n                                <p>ÏÉùÏÑ±Îêú Ïπ¥ÎìúÍ∞Ä ÏïÑÏßÅ ÏóÜÏñ¥Ïöî</p>\r\n                                <p>Î≤ÑÌäºÏùÑ ÎàåÎü¨ ÏÉàÎ°úÏö¥ Ïπ¥ÎìúÎ•º<br/>\r\n                                    ÎßåÎì§Ïñ¥ Î≥ºÍπåÏöî?</p>\r\n                            </div>\r\n                        </>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserHome;","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Notice.js",["108","109"],"import { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Notice = ({match}) => {\r\n    const history = useHistory();\r\n    const number = match.params.number;\r\n    const [title, settitle] = useState(\"\");\r\n    const [subtitle, setsubtitle] = useState(\"\");\r\n    const [text, settext] = useState(\"\");\r\n    const [year, setyear] = useState();\r\n    const [month, setmonth] = useState();\r\n    const [date, setdate] = useState();\r\n    const [background, setbackground] = useState();\r\n    const [attachment, setAttachment] = useState();\r\n    const [more, setmore] = useState(false);\r\n    const [image, setimage] = useState(false);\r\n\r\n    useEffect(async() => {\r\n        await dbService.collection('nweets').doc(number)\r\n        .onSnapshot(doc => {\r\n            settitle(doc.data().title);\r\n            setsubtitle(doc.data().subtitle);\r\n            settext(doc.data().text);\r\n            let timestamp = doc.data().createdAt;\r\n            let date = new Date(timestamp);\r\n            setyear(date.getFullYear());\r\n            setmonth(date.getMonth());\r\n            setdate(date.getDate());\r\n            if(doc.data().cardcolor) setbackground(doc.data().cardcolor)\r\n            else setbackground(doc.data().cardImage)\r\n            setAttachment(doc.data().attachment);\r\n        });\r\n    }, []);\r\n    const gethome = () => history.goBack();\r\n    console.log(attachment);\r\n    return(\r\n        <div id=\"wrap\" className=\"admin-home user-home-notice\">\r\n            <header className=\"header\">\r\n                <div className=\"menu-wrap bg-img\" style={{background: background}}>\r\n                    <button onClick={gethome}><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-chevron-left-fff.svg\"} alt=\"Ïù¥Ï†ÑÏúºÎ°ú\"/></button>\r\n                    <h3 className=\"sub-title\">{subtitle}</h3>\r\n                    <p className=\"written day\">{year + \".\" + month + \".\" + date}</p>\r\n                </div>\r\n            </header>\r\n            <div className=\"content\">\r\n                <div className=\"main-title\"><p>{title}</p></div>\r\n                <div className=\"user-name\">test</div>\r\n                <div className={\"text-area\" + (more ? \" more\" : \"\")}>\r\n                    {text}\r\n                </div>\r\n                <button className=\"overflow-btn\" onClick={() => setmore((prev) => !prev)}>{!more ? \"Îçî Î≥¥Í∏∞\" : \"Í∞ÑÎûµÌûà Î≥¥Í∏∞\"}</button>\r\n                {attachment && (\r\n                    <div className={\"bg-opacity\" + (image ? \" on\" : \"\")}>\r\n                        <div className=\"img-area\" \r\n                        style={{\r\n                        background: `url(${attachment})`,\r\n                        backgroundSize: \"cover\",\r\n                        backgroundRepeat: \"no-repeat\",\r\n                        backgroundPosition: \"center center\",}}\r\n                        onClick={() => setimage((prev) => !prev)}></div>\r\n                    </div>\r\n                )}\r\n                \r\n                <p className=\"state\">\r\n                    <span>ÏûëÏÑ±Îê® .</span>\r\n                    <span> 14ÏãúÍ∞Ñ Ï†Ñ</span>\r\n                </p>\r\n            </div>\r\n            <footer className=\"footer\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Notice;\r\n","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Editcard.js",["110","111","112"],"import { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Popup from \"reactjs-popup\";\r\nimport {v4 as uuidv4} from\"uuid\";\r\n\r\nconst Editcard = ({userObj, match}) => {\r\n    const history = useHistory();\r\n    const id = match.params.id;\r\n    const [title, settitle] = useState(\"\");\r\n    const [sub, setsub] = useState(\"\");\r\n    const [link, setlink] = useState(\"\");\r\n    const [Processing, setProcessing] = useState(0);\r\n    const [Color, setColor] = useState(\"\");\r\n    const [select, setselect] = useState(true);\r\n    const [size, setsize] = useState(true);\r\n    const [fix, setfix] = useState(false);\r\n    const [linkopen, setlinkopen] = useState(true);\r\n    const [attachment, setAttachment] = useState(\"\");\r\n    const [focustitle, setfocustitle] = useState(false);\r\n    const [focussub, setfocussub] = useState(false);\r\n    const [focuslink, setfocuslink] = useState(false);\r\n    const [btnover, setbtnover] = useState(false);\r\n    const handleScroll = () => {\r\n        const {pageYOffset} = window;\r\n        setfix(pageYOffset > 0);\r\n    };\r\n    useEffect(async() => {\r\n        await dbService.collection('nweets').doc(id)\r\n        .onSnapshot(doc => {\r\n            settitle(doc.data().title);\r\n            setsub(doc.data().subtitle);\r\n            setlink(doc.data().link);\r\n            if(doc.data().cardcolor){\r\n                setColor(doc.data().cardcolor);\r\n                setselect(true);\r\n            }\r\n            else {\r\n                setAttachment(doc.data().cardImage);\r\n                setselect(false);\r\n            }\r\n        });\r\n        window.addEventListener('scroll', handleScroll);\r\n    }, []);\r\n    const gradientcolor = [\"linear-gradient(136deg, #d4b2da 1%, #9cd6e0)\", \r\n                            \"linear-gradient(136deg, #86c9ae 1%, #704ddf)\",\r\n                            \"linear-gradient(136deg, #4590e1 1%, #de72b2)\",\r\n                            \"linear-gradient(135deg, #fa7696, #fed946 100%)\",\r\n                            \"linear-gradient(136deg, #c71d6f 1%, #d09693 100%)\",\r\n                            \"linear-gradient(136deg, #134e5e 1%, #71b280)\",\r\n                            \"linear-gradient(135deg, #16222a, #3a6073 100%)\",\r\n                            \"linear-gradient(135deg, #3a6186, #89253e 100%)\",\r\n                            \"linear-gradient(136deg, #8e2de2 1%, #4a00e0)\",\r\n                            \"linear-gradient(136deg, #4767af 1%, #1a2b4c)\",\r\n                            \"linear-gradient(136deg, #545454 1%, #111112 96%)\"];\r\n    const flatcolor = [\"#264653\", \"#2a9d8f\", \"#e9c46a\", \"#f4a261\", \"#e76f51\", \"#ce4257\", \"#720026\", \"#4f000b\", \"#540d6e\", \" #132572\", \"#1d1e20\"];\r\n    const pastelcolor = [\"#e3b5b7\", \"#ddb5cb\", \"#c8bbdb\", \"#b5cbdc\", \"#b7d0cb\", \"#e4d8b9\", \"#e1c6b3\", \"#cebdb3\", \"#988585\", \" #644d56\", \"#353240\"];\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if(name === \"title\"){\r\n            settitle(value);\r\n        } else if(name === \"sub\"){\r\n            setsub(value);\r\n        } else if(name === \"link\"){\r\n            setlink(value);\r\n        }\r\n    }\r\n    const onFocus = (event) => {\r\n        const {target: {name}} = event;\r\n        if(name === \"title\"){\r\n            setfocustitle((prev) => !prev);\r\n        } else if(name === \"sub\"){\r\n            setfocussub((prev) => !prev);\r\n        } else if(name === \"link\"){\r\n            setfocuslink((prev) => !prev);\r\n        }\r\n    }\r\n    const onClickColor = (event, colorname) => {\r\n        setColor(colorname);\r\n    }\r\n    const onSubmit = async (event) => {\r\n        if (title === \"\" || sub === \"\" || link === \"\") {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        let cardObj = \"\"\r\n        \r\n        if(select === true){\r\n            cardObj = {\r\n                title: title,\r\n                subtitle: sub,\r\n                link: link,\r\n                cardcolor: Color,\r\n                createdAt: Date.now(),\r\n                creatorId: userObj.uid,\r\n            }\r\n        } else {\r\n            let attachmentUrl = \"\";\r\n            if(attachment !== \"\"){\r\n                const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n                const response = await attachmentRef.putString(attachment, \"data_url\");\r\n                attachmentUrl = await response.ref.getDownloadURL();\r\n            }\r\n            console.log(attachmentUrl);\r\n            cardObj = {\r\n                title: title,\r\n                subtitle: sub,\r\n                link: link,\r\n                cardImage: attachmentUrl,\r\n                createdAt: Date.now(),\r\n                creatorId: userObj.uid,\r\n            }\r\n        }\r\n        await dbService.collection('nweets').doc(id).update(cardObj);\r\n        settitle(\"\");\r\n        setsub(\"\");\r\n        history.push(\"/\");\r\n    };\r\n    const onFileChange = (event) => {\r\n        const {target: {files}, } = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) => {\r\n            const {currentTarget: {result},\r\n            } = finishedEvent;\r\n            setAttachment(result);\r\n        };\r\n        reader.readAsDataURL(theFile);\r\n    };\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n    const toggleProcessing0 = () => setProcessing(0);\r\n    const toggleProcessing1 = () => setProcessing(1);\r\n    const toggleProcessing2 = () => setProcessing(2);\r\n    const gethome = () => history.push(\"/\");\r\n    const toggleselect = () => setselect((prev) => !prev);\r\n    const togglesize = () => setsize((prev) => !prev);\r\n    const togglelinkopen = () => setlinkopen((prev) => !prev);\r\n    const btnstyle1 = (over) => ({\r\n        borderRight: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n        borderTop: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n    });\r\n    const btnstyle2 = (over) => ({\r\n        borderTop: over ? \"1px solid #fff\" : \"1px solid #ebebeb\",\r\n    });\r\n    return(\r\n        <div id=\"wrap\" className={\"ad-card\" + (Processing>0 ? (Processing === 1 ? (\" ad-card-size\") : (\" ad-card-cover\")) : (\"retouch\"))}>\r\n            <header className={\"header\" + (fix ? \" fix\" : \"\")}>\r\n                <div className=\"menu-wrap\">\r\n                    <button className=\"back\" onClick={toggleProcessing0}><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-chevron-left.svg\"} alt=\"Ïù¥Ï†ÑÏúºÎ°ú\"/></button>\r\n                    <p>{(Processing>0 ? (Processing === 1 ? (\"Ïπ¥Îìú ÌÅ¨Í∏∞ ÏÑ†ÌÉù\") : (\"Ïπ¥Îìú Ïª§Î≤Ñ ÏÑ†ÌÉù\")) : (\"üîß Ïπ¥Îìú ÏàòÏ†ïÌïòÍ∏∞\"))}</p>\r\n                    <Popup\r\n                        trigger={<button className=\"close\"><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-times.svg\"} alt=\"Îã´Í∏∞\"/></button>}\r\n                        modal>\r\n                        {close => (\r\n                            <div className=\"bg-opacity alert on\">\r\n                                <div className=\"alert-wrap\">\r\n                                    <div className=\"alert-box\">\r\n                                        <div className=\"text-box\">\r\n                                            <p className=\"p-header\">üñê Ïû†ÍπêÎßåÏöî</p>\r\n                                            <p className=\"p-text\">ÏûÖÎ†•Ìïú Ï†ïÎ≥¥Í∞Ä<br/>\r\n                                                ÏïÑÏßÅ Ï†ÄÏû•ÎêòÏßÄ ÏïäÏïòÏñ¥Ïöî!</p>\r\n                                        </div>\r\n                                        <div className=\"btn-box\">\r\n                                            <button onClick={() => {\r\n                                                close();\r\n                                                gethome();\r\n                                            }} onMouseEnter={() => setbtnover(true)} onMouseOut={() => setbtnover(false)} style={btnstyle1(btnover)}>Î™®Îëê Ï∑®ÏÜåÌïòÍ∏∞</button>\r\n                                            <button onClick={close} onMouseEnter={() => setbtnover(true)} onMouseOut={() => setbtnover(false)} style={btnstyle2(btnover)}>Í≥ÑÏÜç ÏûÖÎ†•ÌïòÍ∏∞</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </Popup>\r\n                </div>\r\n            </header>\r\n            <div className=\"content\">\r\n                { (() => {\r\n                    if (Processing === 0){\r\n                        return(\r\n                            <>\r\n                                <div className=\"exempli border-bottom\">\r\n                                    <h2>ÏàòÏ†ï ÏòàÏãú</h2>\r\n                                    {(Color || attachment) ? (\r\n                                        select ? (\r\n                                            <div className=\"card\" style={{\r\n                                                background: Color}}>\r\n                                                <h3>{sub}</h3>\r\n                                                <p>{title}</p>\r\n                                            </div> \r\n                                        ) : (\r\n                                            <div className=\"card\" style={{\r\n                                                background: `url(${attachment})`,\r\n                                                backgroundSize: \"cover\",\r\n                                                backgroundRepeat: \"no-repeat\",\r\n                                                backgroundPosition: \"center center\",}}>\r\n                                                <h3>{sub}</h3>\r\n                                                <button><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-arrows.svg\"} alt=\"Ïù¥Îèô ÌôîÏÇ¥Ìëú\"/></button>\r\n                                                <p>{title}</p>\r\n                                            </div> \r\n                                        )\r\n                                    ) : (\r\n                                        <div className=\"card\">\r\n                                            <h3>{sub}</h3>\r\n                                            <p>{title}</p>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-box border-bottom\">\r\n                                    <form className={focustitle ? \"selected\" : \"\"}>\r\n                                        <label for=\"card-name\">A. Ïπ¥Îìú Î©îÏù∏ ÌÉÄÏù¥ÌãÄ<span className=\"required\">*</span></label>\r\n                                        <input \r\n                                            type=\"text\" \r\n                                            id=\"card-name\" \r\n                                            className=\"input-basic\" \r\n                                            name=\"title\"\r\n                                            value={title}\r\n                                            onChange={onChange}\r\n                                            onFocus={onFocus}\r\n                                            onBlur={onFocus}\r\n                                            placeholder=\"Ïπ¥ÎìúÏóê Î≥¥Ïó¨Ïßà Ïù¥Î¶ÑÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî  ex. Ïπ¥Ïπ¥Ïò§ÌÜ° Î¨∏Ïùò\"/>\r\n                                        <div className=\"message\">Ïπ¥Îìú Ïù¥Î¶ÑÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî</div>\r\n                                    </form>\r\n                                    <form className={focussub ? \"selected\" : \"\"}>\r\n                                        <label for=\"sub-card-name\">B. Ïπ¥Îìú ÏÑúÎ∏å ÌÉÄÏù¥ÌãÄ</label>\r\n                                        <input \r\n                                            type=\"text\" \r\n                                            id=\"sub-card-name\" \r\n                                            className=\"input-basic\" \r\n                                            name=\"sub\"\r\n                                            value={sub}\r\n                                            onChange={onChange}\r\n                                            onFocus={onFocus}\r\n                                            onBlur={onFocus}\r\n                                            placeholder=\"ÏÑúÎ∏å ÌÉÄÏù¥ÌãÄ ÎÇ¥Ïö©ÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî  ex. B. ü§ôüèªü§ôüèΩü§ôüèø\"/>\r\n                                        <div className=\"message\">ÏÑúÎ∏å ÌÉÄÏù¥ÌãÄ ÏûÖÎ†•, ÏµúÎåÄ 16Ïûê</div>\r\n                                    </form>\r\n                                    <form className={focuslink ? \"selected\" : \"\"}>\r\n                                        <label for=\"card-index\">C. Ïó∞Í≤∞ Ìï† ÎßÅÌÅ¨ Ï£ºÏÜåÎ•º Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî<span class=\"required\">*</span></label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"card-index\"\r\n                                            className=\"input-basic\"\r\n                                            name=\"link\"\r\n                                            value={link}\r\n                                            onChange={onChange}\r\n                                            onFocus={onFocus}\r\n                                            onBlur={onFocus}\r\n                                            placeholder=\"Ïó∞Í≤∞ Ìï† ÎßÅÌÅ¨ Ï£ºÏÜå Ï†ÑÏ≤¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\"/>\r\n                                        <div className=\"message\">Ï†ïÌôïÌïú ÎßÅÌÅ¨ Ï£ºÏÜåÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî</div>\r\n                                    </form>\r\n                                </div>\r\n                                <div className=\"toggle-box hover-style\">\r\n                                    <div className={linkopen ? \"toggle-on\" : \"\"}>\r\n                                        <p>ÎßÅÌÅ¨ Í≥µÍ∞ú Ïó¨Î∂Ä<span>{linkopen ? \"ON\" : \"OFF\"}</span></p>\r\n                                        <button className=\"btn-toggle\" onClick={togglelinkopen}><span></span></button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"card-size-box hover-style\">\r\n                                    <button className=\"select\" onClick={toggleProcessing1}>\r\n                                        <p>Ïπ¥Îìú ÌÅ¨Í∏∞ ÏÑ†ÌÉù<span>LARGE</span></p>\r\n                                        <img src={process.env.PUBLIC_URL + \"02-icon-01-outline-chevron-right.svg\"} alt=\"ÏÑ†ÌÉù\"/>\r\n                                    </button>\r\n                                    <button onClick={toggleProcessing2}>\r\n                                        <p>Ïπ¥Îìú Ïª§Î≤Ñ ÏÑ†ÌÉù<span>ÎØ∏ÏÑ†ÌÉù</span></p>\r\n                                        <img src={process.env.PUBLIC_URL + \"02-icon-01-outline-chevron-right.svg\"} alt=\"ÏÑ†ÌÉù\"/>\r\n                                    </button>\r\n                                </div>\r\n                                { (title && sub && link) ? (\r\n                                    <button className=\"btn-purple-filled enable\" onClick={onSubmit}>Ïπ¥Îìú ÏàòÏ†ï ÏôÑÎ£å</button>\r\n                                ) : (\r\n                                    <button className=\"btn-purple-filled\">Ïπ¥Îìú ÏàòÏ†ï ÏôÑÎ£å</button>\r\n                                )}\r\n                            </>\r\n                        );\r\n                    } else if( Processing === 1){\r\n                        return(\r\n                            <>\r\n                                <h2>ÏõêÌïòÎäî Ïπ¥Îìú ÌÅ¨Í∏∞Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</h2>\r\n                                <div className=\"form-box border-bottom\">\r\n                                    <form className=\"check-circle\">\r\n                                        <input type=\"checkbox\" name=\"checkbox\" id=\"size-s\" checked={!size && \"checked\"} onClick={togglesize}/>\r\n                                        <label for=\"size-s\">S</label>\r\n                                    </form>\r\n                                    <form className=\"check-circle\">\r\n                                        <input checked type=\"checkbox\" name=\"checkbox\" id=\"size-l\" checked={size && \"checked\"} onClick={togglesize}/>\r\n                                        <label for=\"size-l\">L</label>\r\n                                    </form>\r\n                                    {!size && <p className=\"size-s-error\" style={{display:\"block\"}}>üì¢ ÏßÄÍ∏àÏùÄ ‚ÄòL‚Äô ÏÇ¨Ïù¥Ï¶à Ïπ¥ÎìúÎßå ÏßÄÏõêÌïòÍ≥† ÏûàÏñ¥Ïöî<br/>\r\n                                        Ïù¥Î•∏ ÏãúÏùº ÏïàÏóê ÏÑ†ÌÉù Ìï† Ïàò ÏûàÎèÑÎ°ù ÎÖ∏Î†•ÌïòÍ≤†ÏäµÎãàÎã§ üôá‚Äç‚ôÇÔ∏è</p>}\r\n                                </div>\r\n                                <div className=\"card-box\">\r\n                                    <p>Ïπ¥Îìú ÌÅ¨Í∏∞ ÏòàÏãú</p>\r\n                                    <div className={\"card-wrap\" + (size ? \"\" : \" flex-column\")}>\r\n                                        <div className=\"card\">\r\n                                            <button><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-arrows.svg\"} alt=\"Ïù¥Îèô ÌôîÏÇ¥Ìëú\"/></button>\r\n                                            <p>S</p>\r\n                                        </div>\r\n                                        <div className=\"card checked\">\r\n                                            <button><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-arrows.svg\"} alt=\"Ïù¥Îèô ÌôîÏÇ¥Ìëú\"/></button>\r\n                                            <p>L</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                {size ? (\r\n                                    <button className=\"btn-purple-filled enable\" onClick={toggleProcessing0}>Ïπ¥Îìú ÌÅ¨Í∏∞ Ï†ÅÏö©ÌïòÍ∏∞</button>\r\n                                ) : (\r\n                                    <button className=\"btn-purple-filled\">Ïπ¥Îìú ÌÅ¨Í∏∞ Ï†ÅÏö©ÌïòÍ∏∞</button>\r\n                                )}\r\n                            </>\r\n                        );\r\n                    } else if (Processing === 2){\r\n                        return(\r\n                            <>\r\n                                <h2>ÏõêÌïòÎäî Ïπ¥Îìú ÏÉâÏÉÅÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</h2>\r\n                                <div className=\"form-box border-bottom\">\r\n                                    <form className=\"check-circle\">\r\n                                        <input type=\"checkbox\" name=\"checkbox\" id=\"bd-check-color\" checked={select && \"checked\"} onClick={toggleselect}/>\r\n                                        <label for=\"bd-check-color\">ÏÉâÏÉÅ ÏÑ†ÌÉùÌïòÍ∏∞</label>\r\n                                    </form>\r\n                                    <form className=\"check-circle\">\r\n                                        <input type=\"checkbox\" name=\"checkbox\" id=\"bd-check-img\" checked={!select && \"checked\"}onClick={toggleselect}/>\r\n                                        <label for=\"bd-check-img\">Ïù¥ÎØ∏ÏßÄ Ïò¨Î¶¨Í∏∞</label>\r\n                                    </form>\r\n                                </div>\r\n                                { select ? (\r\n                                    <div className=\"colorBox\">\r\n                                        <h3>ÏÉâÏÉÅ Ïπ¥Îìú Ï§ë ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî</h3>\r\n                                        <div className=\"color-box-wrap\">\r\n                                            <div className=\"gradients\">\r\n                                                <h4>Gradients</h4>\r\n                                                <div className=\"color-chip-wrap\">\r\n                                                    {gradientcolor.map(key => {\r\n                                                        if(key === Color){\r\n                                                            return <div className=\"check\" onClick={(e) => onClickColor(e, key)}></div>\r\n                                                        } else {\r\n                                                            return <div onClick={(e) => onClickColor(e, key)}></div>\r\n                                                        }\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"flat-color\">\r\n                                                <h4>Flat colors</h4>\r\n                                                <div className=\"color-chip-wrap\">\r\n                                                    {flatcolor.map(key => {\r\n                                                        if(key === Color){\r\n                                                            return <div className=\"check\" onClick={(e) => onClickColor(e, key)}></div>\r\n                                                        } else {\r\n                                                            return <div onClick={(e) => onClickColor(e, key)}></div>\r\n                                                        }\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"pastel-color\">\r\n                                                <h4>Pastel colors </h4>\r\n                                                <div className=\"color-chip-wrap\">\r\n                                                    {pastelcolor.map(key => {\r\n                                                        if(key === Color){\r\n                                                            return <div className=\"check\" onClick={(e) => onClickColor(e, key)}></div>\r\n                                                        } else {\r\n                                                            return <div onClick={(e) => onClickColor(e, key)}></div>\r\n                                                        }\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                ) : (\r\n                                    <div className=\"imgBox\">\r\n                                        <div className=\"form-box\">\r\n                                            <form>\r\n                                                <label for=\"card-img\" className=\"ad-img-box\">\r\n                                                    <p>ÏõêÌïòÎäî Ïù¥ÎØ∏ÏßÄÎ•º Ïò¨Î†§Ï£ºÏÑ∏Ïöî</p>\r\n                                                    {attachment ? (\r\n                                                        <>\r\n                                                            <div style={{\r\n                                                                background: `url(${attachment})`,\r\n                                                                backgroundSize: \"cover\",\r\n                                                                backgroundRepeat: \"no-repeat\",\r\n                                                                backgroundPosition: \"center center\",}}>\r\n                                                                <p>üì∑</p>\r\n                                                                <p>Ïù¥ÎØ∏ÏßÄ Ïò¨Î¶¨Í∏∞</p>\r\n                                                                <p>ÌÅ¥Î¶≠ ÌõÑ Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÍ±∞ÎÇò,<br/>\r\n                                                                    ÏßÅÏ†ë ÎÅåÏñ¥ÏôÄÏÑú ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî </p>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            <div>\r\n                                                                <p>üì∑</p>\r\n                                                                <p>Ïù¥ÎØ∏ÏßÄ Ïò¨Î¶¨Í∏∞</p>\r\n                                                                <p>ÌÅ¥Î¶≠ ÌõÑ Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÍ±∞ÎÇò,<br/>\r\n                                                                    ÏßÅÏ†ë ÎÅåÏñ¥ÏôÄÏÑú ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî </p>\r\n                                                            </div>\r\n                                                        </>\r\n                                                    )}\r\n                                                </label>\r\n                                                <input \r\n                                                    type=\"file\" \r\n                                                    id={\"card-img\" + (attachment ? \" on\" : \"\")} \r\n                                                    className=\"input-basic\" \r\n                                                    onChange={onFileChange}\r\n                                                    checked/>\r\n                                                <div className={\"img-del-btn\" + (attachment ? (\" on\") : (\"\"))}>\r\n                                                    <button onClick={onClearAttachment}><img src={process.env.PUBLIC_URL + \"02-icon-01-outline-trash.svg\"} alt=\"Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†úÌïòÍ∏∞\"/>ÏÇ≠Ï†ú</button>\r\n                                                </div>\r\n                                            </form>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                <button className=\"btn-purple-filled enable\" onClick={toggleProcessing0}>Ïπ¥Îìú Ïª§Î≤Ñ Ï†ÅÏö©ÌïòÍ∏∞</button>\r\n                            </>\r\n                        );\r\n                    } \r\n                })()}\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Editcard;","C:\\Users\\wndrms\\Desktop\\dev\\project\\brity\\src\\components\\Editnotice.js",["113","114","115"],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":9,"column":19,"nodeType":"122","messageId":"123","endLine":9,"endColumn":27},{"ruleId":"124","severity":1,"message":"125","line":270,"column":100,"nodeType":"126","endLine":270,"endColumn":127},{"ruleId":"124","severity":1,"message":"125","line":312,"column":104,"nodeType":"126","endLine":312,"endColumn":131},{"ruleId":"127","severity":1,"message":"128","line":101,"column":29,"nodeType":"129","endLine":101,"endColumn":113},{"ruleId":"120","severity":1,"message":"130","line":2,"column":28,"nodeType":"122","messageId":"123","endLine":2,"endColumn":34},{"ruleId":"120","severity":1,"message":"131","line":49,"column":13,"nodeType":"122","messageId":"123","endLine":49,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":399,"column":80,"nodeType":"134","messageId":"135","endLine":399,"endColumn":82},{"ruleId":"132","severity":1,"message":"133","line":399,"column":104,"nodeType":"134","messageId":"135","endLine":399,"endColumn":106},{"ruleId":"132","severity":1,"message":"133","line":537,"column":123,"nodeType":"134","messageId":"135","endLine":537,"endColumn":125},{"ruleId":"132","severity":1,"message":"133","line":541,"column":125,"nodeType":"134","messageId":"135","endLine":541,"endColumn":127},{"ruleId":"132","severity":1,"message":"133","line":545,"column":123,"nodeType":"134","messageId":"135","endLine":545,"endColumn":125},{"ruleId":"136","severity":1,"message":"137","line":19,"column":15,"nodeType":"138","endLine":29,"endColumn":6},{"ruleId":"139","severity":1,"message":"140","line":50,"column":31,"nodeType":"138","messageId":"141","endLine":50,"endColumn":33},{"ruleId":"139","severity":1,"message":"140","line":59,"column":36,"nodeType":"138","messageId":"141","endLine":59,"endColumn":38},{"ruleId":"136","severity":1,"message":"142","line":10,"column":8,"nodeType":"143","endLine":10,"endColumn":10,"suggestions":"144"},{"ruleId":"120","severity":1,"message":"145","line":25,"column":11,"nodeType":"122","messageId":"123","endLine":25,"endColumn":25},{"ruleId":"120","severity":1,"message":"146","line":10,"column":19,"nodeType":"122","messageId":"123","endLine":10,"endColumn":27},{"ruleId":"136","severity":1,"message":"137","line":19,"column":15,"nodeType":"138","endLine":34,"endColumn":6},{"ruleId":"136","severity":1,"message":"147","line":34,"column":8,"nodeType":"143","endLine":34,"endColumn":10,"suggestions":"148"},{"ruleId":"136","severity":1,"message":"137","line":28,"column":15,"nodeType":"138","endLine":44,"endColumn":6},{"ruleId":"136","severity":1,"message":"149","line":44,"column":8,"nodeType":"143","endLine":44,"endColumn":10,"suggestions":"150"},{"ruleId":"124","severity":1,"message":"125","line":286,"column":100,"nodeType":"126","endLine":286,"endColumn":127},{"ruleId":"136","severity":1,"message":"137","line":29,"column":15,"nodeType":"138","endLine":46,"endColumn":6},{"ruleId":"136","severity":1,"message":"149","line":46,"column":8,"nodeType":"143","endLine":46,"endColumn":10,"suggestions":"151"},{"ruleId":"124","severity":1,"message":"125","line":325,"column":100,"nodeType":"126","endLine":325,"endColumn":127},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"no-unused-vars","'seterror' is assigned a value but never used.","Identifier","unusedVar","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useRef' is defined but never used.","'getdoc' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has a missing dependency: 'nweets'. Either include it or remove the dependency array. If 'setlist' needs the current value of 'nweets', you can also switch to useReducer instead of useState and read 'nweets' in the reducer.","ArrayExpression",["154"],"'reauthenticate' is assigned a value but never used.","'setcheck' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'number'. Either include it or remove the dependency array.",["155"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["156"],["157"],"no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"162","fix":"164"},"Update the dependencies array to be: [nweets]",{"range":"165","text":"166"},"Update the dependencies array to be: [number]",{"range":"167","text":"168"},"Update the dependencies array to be: [id]",{"range":"169","text":"170"},{"range":"171","text":"170"},[366,368],"[nweets]",[1370,1372],"[number]",[1718,1720],"[id]",[1829,1831]]